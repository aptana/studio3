<?xml version="1.0" encoding="UTF-8"?>
<!-- ======================================================================
     Sep 1st 2009

     Studio Core
     Builds the Studio core features

     cwilliams
     ====================================================================== -->
<project name="studio3" default="build">
	<description>
            Builds the Studio Core feature
    </description>

	<property environment="env" />
	<property file="build_local.properties" />
	<!-- Set is.windows property IF the OS is from the Windows family -->
	<condition property="is.windows" value="true">
		<os family="windows" />
	</condition>

	<taskdef resource="net/sf/antcontrib/antlib.xml">
		<classpath>
			<pathelement location="ant-contrib/ant-contrib.jar" />
		</classpath>
	</taskdef>

	<!-- =================================
          target: build
         ================================= -->
	<target name="build" description="Builds the Studio core feature" depends="generate.build.properties,get.revision,replace.versions,generate.base">
		<java jar="${baseLocation}/plugins/${launcher.plugin}.jar" fork="true" failonerror="yes">
			<arg line="-application org.eclipse.ant.core.antRunner -buildfile ${baseLocation}/plugins/${builder.plugin}/scripts/build.xml -Dbuilder=${basedir} -Dbuild.revision=${build.revision} -nosplash" />
		</java>
	</target>

	<!-- =================================
          target: generate.build.properties
         ================================= -->
	<target name="generate.build.properties" description="Takes in properties from build_local.properties and the command line overrides and generates a combined build.properties to use for the build">
		<echoproperties destfile="build.properties">
			<propertyset negate="true">
				<propertyref prefix="java." />
				<propertyref prefix="ant." />
				<propertyref prefix="awt." />
				<propertyref prefix="user." />
				<propertyref prefix="sun." />
			</propertyset>
		</echoproperties>
	</target>

	<!-- =================================
	      target: clean
	     ================================= -->
	<target name="clean" depends="generate.build.properties" description="Clean up temp and build files">
		<delete dir="${buildDirectory}" failonerror="false" />
	</target>

	<!-- - - - - - - - - - - - - - - - - -
          target: generate.base
         - - - - - - - - - - - - - - - - - -->
	<target name="generate.base" depends="copy.base.windows,copy.base" />

	<!-- - - - - - - - - - - - - - - - - -
          target: copy.base
          On non-Windows machines, copy eclipse and plugins/features directories to buildDirectory to set up for build
         - - - - - - - - - - - - - - - - - -->
	<target name="copy.base" unless="is.windows">
		<mkdir dir="${buildDirectory}" />
		<!-- Copy over the original base eclipse to a new location.
								Have to use exec cp to retain permissions on *nix, Mac -->
		<echo message="Copying eclipse" level="info" />
		<exec executable="cp">
			<arg line="-R ${vanilla.eclipse} ${baseLocation}" />
		</exec>
	</target>

	<!-- - - - - - - - - - - - - - - - - -
          target: copy.base.windows
	     - - - - - - - - - - - - - - - - - -->
	<target name="copy.base.windows" if="is.windows">
		<mkdir dir="${buildDirectory}" />
		<!-- copy eclipse -->
		<copy todir="${baseLocation}">
			<fileset dir="${vanilla.eclipse}" includes="**/*" defaultexcludes="false" />
		</copy>
	</target>

	<!-- - - - - - - - - - - - - - - - - -
          target: get.revision
         - - - - - - - - - - - - - - - - - -->
	<target name="get.revision">
		<echo message="Retrieving Git timestamp for latest revision" level="info" />
		<exec executable="/bin/bash" dir="${basedir}" outputproperty="git.revision.max">
			<arg value="-c" />
			<arg value="${git.executable} log --max-count=1 --pretty=format:'%ct'" />
		</exec>
		<property name="build.revision" value="${git.revision.max}" />
		<echo message="Revision timestamp: ${build.revision}" level="info" />
	</target>

	<!-- - - - - - - - - - - - - - - - - -
	      target: replace.versions
	     - - - - - - - - - - - - - - - - - -->
	<target name="replace.versions" description="Replaces all the qualifiers for plugins/features with the last changed rev for that plugin/feature.">
		<!-- Iterate through every plugin and feature directory and replace qualifier in
		        build.properties with qualifier for just that plugin/feature! -->
		<for param="file" parallel="true">
			<path>
				<dirset dir="${workspace}" defaultexcludes="true">
					<include name="plugins/*" />
					<include name="features/*" />
					<exclude name="plugins/com.aptana.usage" />
					<exclude name="plugins/com.aptana.scripting" />
					<exclude name="${topLevelElementType}s/${topLevelElementId}" />
				</dirset>
			</path>
			<sequential>
				<exec executable="/bin/bash" dir="@{file}" outputproperty="@{file}.committed.max.tmp">
					<arg value="-c" />
					<arg value="${git.executable} log --max-count=1 --pretty=format:'%ct' ." />
				</exec>
				<condition property="@{file}.committed.max" value="context">
					<length string="${@{file}.committed.max.tmp}" trim="true" length="0" />
				</condition>
				<property name="@{file}.committed.max" value="${@{file}.committed.max.tmp}" />

				<echo message="Replacing qualifier for @{file} with ${@{file}.committed.max}" level="info" />
				<exec executable="grep" dir="@{file}" resultproperty="@{file}.hasQualifierLine" logerror="false" failifexecutionfails="false" failonerror="false">
					<arg line="qualifier ./build.properties" />
				</exec>
				<if>
					<equals arg1="${@{file}.hasQualifierLine}" arg2="0" />
					<then>
						<echo message="replacing qualifier value" level="info" />
						<replaceregexp file="@{file}/build.properties" match="qualifier\s*=\s*context" replace="qualifier = ${@{file}.committed.max}" byline="true" />
					</then>
					<else>
						<echo message="no qualifier property, adding one" level="info" />
						<concat append="true" destfile="@{file}/build.properties">qualifier = ${@{file}.committed.max}</concat>
					</else>
				</if>
			</sequential>
		</for>
	</target>

	<target name="create-artifact-symlink" depends="unlink-symlink">
		<symlink link="${env.WORKSPACE}/build-artifacts" resource="${deploy.dir}" failonerror="false" />
	</target>
	<target name="unlink-symlink" depends="link.check" if="link.exists">
		<exec executable="unlink">
			<arg value="${env.WORKSPACE}/build-artifacts" />
		</exec>
	</target>
	<target name="link.check">
		<available file="${env.WORKSPACE}/build-artifacts" property="link.exists" />
	</target>
</project>
