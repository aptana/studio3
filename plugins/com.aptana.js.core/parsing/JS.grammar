// java -jar beaver.jar -T -w JS.grammar
%package "com.aptana.js.core.parsing";

%class "JSParser";

%import "java.io.IOException";
%import "java.util.ArrayList";
%import "java.util.List";

%import "org.eclipse.core.runtime.Platform";

%import "com.aptana.core.build.IProblem";
%import "com.aptana.js.core.IJSConstants";
%import "com.aptana.js.core.JSCorePlugin";
%import "com.aptana.js.core.parsing.ast.*";
%import "com.aptana.js.core.preferences.IPreferenceConstants";
%import "com.aptana.parsing.IParseState";
%import "com.aptana.parsing.IParser";
%import "com.aptana.parsing.IRecoveryStrategy";
%import "com.aptana.parsing.ast.IParseNode";
%import "com.aptana.parsing.ast.IParseError";
%import "com.aptana.parsing.ast.ParseError";
%import "com.aptana.parsing.util.ParseUtil";
%import "com.aptana.parsing.WorkingParseResult";
%import "com.aptana.parsing.ParseResult";

%implements "IParser";

%embed {:
	private WorkingParseResult fWorking;

	// Collect the errors into a list of IParseErrors and let the custom error recovery mechanism handle it
	private class JSEvents extends Events
	{
		public void scannerError(Scanner.Exception e)
		{
		}

		public void syntaxError(Symbol token)
		{
			if (token != null && fWorking != null)
			{
				fWorking.addError(new ParseError(IJSConstants.CONTENT_TYPE_JS, token, IParseError.Severity.ERROR));
			}
		}

		public void unexpectedTokenRemoved(Symbol token)
		{
		}

		public void missingTokenInserted(Symbol token)
		{
		}

		public void missingTokensInserted(List<Symbol> tokens)
		{
			if (tokens != null && tokens.size() == 1 && tokens.get(0).getId() == Terminals.SEMICOLON)
			{
				// remove last error
				if (fWorking != null)
				{
					List<IParseError> errors = fWorking.getErrors();
					IParseError lastError = (errors.isEmpty()) ? null : errors.get(errors.size() - 1);

					if (lastError != null)
					{
						fWorking.removeError(lastError);
					}
				}
			}

			super.missingTokensInserted(tokens);
		}

		public void misspelledTokenReplaced(Symbol token)
		{
		}

		public void errorPhraseRemoved(Symbol error)
		{
		}
	}

	private final List<IRecoveryStrategy> recoveryStrategies;
	private JSFlexScanner fScanner;
	private IProblem.Severity fSemicolonSeverity = IProblem.Severity.WARNING;

    /**
     * attachPostDocumentationBlocks
     * 
     * @param root
     * @param source
     */
    private void attachPostDocumentationBlocks(JSParseRootNode root, String source)
    {
        // process each post-documentation block
        for (Symbol block : this.fScanner.getVSDocComments())
        {
            int index = block.getStart() - 1;

            while (index >= 0 && Character.isWhitespace(source.charAt(index)))
            {
                index--;
            }

            IParseNode node = root.getNodeAtOffset(index);

            if (node instanceof JSNode)
            {
                switch (node.getNodeType())
                {
                    case IJSNodeTypes.STATEMENTS:
                        IParseNode parent = node.getParent();

                        if (parent.getNodeType() == IJSNodeTypes.FUNCTION)
                        {
                            ((JSNode) parent).setPostDocumentation(block);
                        }
                        break;

                    default:
                        ((JSNode) node).setPostDocumentation(block);
                        break;
                }
            }
        }
    }

    /**
     * attachPreDocumentationBlocks
     * 
     * @param root
     * @param source
     */
    private void attachPreDocumentationBlocks(JSParseRootNode root, String source)
    {
        // process each pre-documentation block
        List<Symbol> sDocComments = fScanner.getSDocComments();
        for (Symbol comment : sDocComments)
        {
            int index = comment.getEnd() + 1;

            while (index < source.length() && Character.isWhitespace(source.charAt(index)))
            {
                index++;
            }

            IParseNode node = root.getNodeAtOffset(index);

            if (node instanceof JSNode)
            {
                if (node instanceof JSGroupNode && node.getFirstChild() instanceof JSFunctionNode)
                {
                    ((JSNode) node.getFirstChild()).setPreDocumentation(comment);
                }
                else if (node instanceof JSIdentifierNode && node.getParent() instanceof JSNameValuePairNode)
                {
                    // associate documentation with property's value
                    JSNameValuePairNode entry = (JSNameValuePairNode) node.getParent();
                    ((JSNode) entry.getValue()).setPreDocumentation(comment);
                }
                else
                {
                    IParseNode statement = ((JSNode) node).getContainingStatementNode();

                    if (statement instanceof JSAssignmentNode)
                    {
                        ((JSNode) statement.getLastChild()).setPreDocumentation(comment);
                    }
                    else
                    {
                        switch (node.getNodeType())
                        {
                            case IJSNodeTypes.VAR:
                                // associate documentation with first declared variable's value
                                JSVarNode varNode = (JSVarNode) node;
                                ((JSNode) varNode.getFirstChild().getLastChild()).setPreDocumentation(comment);
                                break;

                            default:
                                ((JSNode) node).setPreDocumentation(comment);
                                break;
                        }
                    }
                }
            }
        }
    }

	/**
	 * getNextSymbolIndex
	 * 
	 * @return
	 */
	protected Symbol getLastSymbol()
	{
		Symbol result = null;

		if (0 <= this.top && this.top < this._symbols.length)
		{
			result = this._symbols[this.top];
		}

		return result;
	}

    public synchronized ParseResult parse(IParseState parseState) throws java.lang.Exception
    {
        WorkingParseResult working = new WorkingParseResult();
        parse(parseState, working);
        return working.getImmutableResult();
    }


	/*
	 * (non-Javadoc)
	 * @see com.aptana.parsing.IParser#parse(com.aptana.parsing.IParseState)
	 */
	protected synchronized void parse(IParseState parseState, WorkingParseResult working) throws java.lang.Exception
	{
		fWorking = working;
		String severity = Platform.getPreferencesService().getString(JSCorePlugin.PLUGIN_ID, IPreferenceConstants.PREF_MISSING_SEMICOLON_SEVERITY, null, null);
		fSemicolonSeverity = IProblem.Severity.create(severity);

		// make sure we have some source
		String source = parseState.getSource();

		// create scanner and send source to it
		fScanner = new JSFlexScanner();
		fScanner.setSource(source);

		// determine if we need to collect and/or attach comments
		boolean attachComments = true;
		boolean collectComments = true;

		if (parseState instanceof JSParseState)
		{
			JSParseState jsParseState = (JSParseState) parseState;

			// NOTE: In order to attach comments, we have to collect them, hence the OR in collectComments
			attachComments = jsParseState.attachComments();
			collectComments = jsParseState.attachComments() || jsParseState.collectComments();
		}

		fScanner.setCollectComments(collectComments);

		try
		{
			JSParseRootNode result;
			try
			{
				// parse
				result = (JSParseRootNode) parse(fScanner);

				if (attachComments)
				{
					attachComments(source, result);
				}

				if (collectComments)
				{
					collectComments(result);
				}
			}
			finally
			{
				// clear scanner for garbage collection
				if (fScanner != null)
				{
					fScanner.yyclose();
					fScanner = null;
				}
			}

			// update node offsets
			int start = parseState.getStartingOffset();
			int length = source.length();

			// align root with zero-based offset
			result.setLocation(0, length - 1);

			if (start != 0)
			{
				// shift all offsets to the correct position
				ParseUtil.addOffset(result, start);
			}

			// store results in the parse state
			fWorking.setParseResult(result);
		}
		finally
		{
			fWorking = null;
		}
	}

	
    private void attachComments(String source, JSParseRootNode result)
    {
        // attach documentation
        attachPreDocumentationBlocks(result, source);
        attachPostDocumentationBlocks(result, source);
    }

    private void collectComments(JSParseRootNode result)
    {
        // create a list of all comments and attach to root node

        List<Symbol> sDocComments = fScanner.getSDocComments();
        List<Symbol> vsDocComments = fScanner.getVSDocComments();
        List<Symbol> singleLineComments = fScanner.getSingleLineComments();
        List<Symbol> multiLineComments = fScanner.getMultiLineComments();

        List<JSCommentNode> comments = new ArrayList<JSCommentNode>(sDocComments.size() + vsDocComments.size()
                + singleLineComments.size() + multiLineComments.size());

        for (Symbol symbol : sDocComments)
        {
            comments.add(new JSCommentNode(IJSNodeTypes.SDOC_COMMENT, symbol.getStart(), symbol.getEnd()));
        }

        for (Symbol symbol : vsDocComments)
        {
            comments.add(new JSCommentNode(IJSNodeTypes.VSDOC_COMMENT, symbol.getStart(), symbol.getEnd()));
        }

        for (Symbol symbol : singleLineComments)
        {
            comments.add(new JSCommentNode(IJSNodeTypes.SINGLE_LINE_COMMENT, symbol.getStart(), symbol.getEnd()));
        }

        for (Symbol symbol : multiLineComments)
        {
            comments.add(new JSCommentNode(IJSNodeTypes.MULTI_LINE_COMMENT, symbol.getStart(), symbol.getEnd()));
        }

        result.setCommentNodes(comments.toArray(new IParseNode[comments.size()]));
    }

	/*
	 * (non-Javadoc)
	 * @see beaver.Parser#recoverFromError(beaver.Symbol, beaver.Parser.TokenStream)
	 */
	@Override
	protected void recoverFromError(Symbol token, TokenStream in) throws IOException, Parser.Exception
	{
		boolean success = false;

		if (this.recoveryStrategies != null)
		{
			// NOTE: Consider building a Map<Object,List<IRecoveryStrategy>> which
			// would allow us to reduce the number of recovery strategies that will
			// be attempted based on the last symbol on the stack. We may need
			// catch-all cases: 1) try these before the mapped strategies, 2)
			// try the strategies, 3) try these after the mapped strategies
			for (IRecoveryStrategy strategy : this.recoveryStrategies)
			{
				if (strategy.recover(this, getLastSymbol(), token, in, report))
				{
					success = true;
					break;
				}
			}
		}

		if (success == false)
		{
			super.recoverFromError(token, in);
		}
	}
:};

%init {:
		report = new JSEvents();

		// @formatter:off
		recoveryStrategies = new ArrayList<IRecoveryStrategy>(10);

		recoveryStrategies.add(new JSInsertionRecoveryStrategy(JSTokenType.SEMICOLON, ";")
		{
			public boolean recover(IParser parser, Symbol lastToken, Symbol currentToken, TokenStream in, Events report)
					throws IOException
			{
				boolean recovered = super.recover(parser, lastToken, currentToken, in, report);
				if (recovered && fSemicolonSeverity != IProblem.Severity.IGNORE)
				{
					fWorking.addError(new ParseError(IJSConstants.CONTENT_TYPE_JS, lastToken, Messages.JSParser_MissingSemicolonMsg, fSemicolonSeverity));
				}
				return recovered;
			}
		});
		recoveryStrategies.add(new JSInsertionRecoveryStrategy(JSTokenType.RPAREN, ")", JSTokenType.SEMICOLON, ";"));
		recoveryStrategies.add(new JSInsertionRecoveryStrategy(JSTokenType.IDENTIFIER, "", JSTokenType.SEMICOLON, ";", JSTokenType.DOT, JSTokenType.NEW, JSTokenType.EQUAL));
		recoveryStrategies.add(new JSInsertionRecoveryStrategy(JSTokenType.IDENTIFIER, "", JSTokenType.DOT, JSTokenType.NEW, JSTokenType.EQUAL));
		recoveryStrategies.add(new JSInsertionRecoveryStrategy(JSTokenType.IDENTIFIER, "", JSTokenType.LPAREN));
		recoveryStrategies.add(new JSInsertionRecoveryStrategy(JSTokenType.IDENTIFIER, "", JSTokenType.COLON, ":", JSTokenType.DOT));
		recoveryStrategies.add(new JSInsertionRecoveryStrategy(JSTokenType.LCURLY, "{", JSTokenType.RCURLY, "}", JSTokenType.RPAREN));
		recoveryStrategies.add(new IRecoveryStrategy()
		{
			public boolean recover(IParser parser, Symbol lastToken, Symbol currentToken, TokenStream in, Parser.Events report) throws IOException
			{
				boolean result = false;

				if (top >= 2)
				{
					Symbol symbol1 = _symbols[top - 2];
					Symbol symbol2 = _symbols[top - 1];

					if (lastToken.getId() == JSTokenType.COMMA.getIndex() && symbol2.value instanceof List<?> && symbol1.getId() == JSTokenType.LPAREN.getIndex())
					{
						Symbol term = new Symbol(JSTokenType.IDENTIFIER.getIndex(), currentToken.getStart(), currentToken.getStart() - 1, "");
						Simulator sim = new Simulator();

						in.alloc(2);
						in.insert(term, currentToken);
						in.rewind();

						if (sim.parse(in))
						{
							result = true;

							in.rewind();

							report.missingTokenInserted(term);
						}
					}
				}

				return result;
			}
		});

		JSInsertionRecoveryStrategy completeProperty = new JSInsertionRecoveryStrategy(JSTokenType.IDENTIFIER, "");
		completeProperty.addCurrentTokenTypes(JSTokenType.RCURLY);
		recoveryStrategies.add(completeProperty);

		JSInsertionRecoveryStrategy completeProperty2 = new JSInsertionRecoveryStrategy(JSTokenType.COLON, ":", JSTokenType.IDENTIFIER, "");
		completeProperty2.addCurrentTokenTypes(JSTokenType.RCURLY);
		recoveryStrategies.add(completeProperty2);
		// @formatter:on
:};

%terminals FUNCTION, IDENTIFIER, STRING, NUMBER, NULL, TRUE, FALSE, REGEX;
%terminals LCURLY, RCURLY, LPAREN, RPAREN, LBRACKET, RBRACKET, COMMA, COLON, SEMICOLON, EQUAL, DOT, QUESTION;
%terminals IF, ELSE, DO, WHILE, FOR, IN, CONTINUE, BREAK, RETURN, WITH, SWITCH, CASE, DEFAULT, THROW, TRY, CATCH, FINALLY;
%terminals VAR, THIS, NEW, DELETE, PLUS_PLUS, MINUS_MINUS, PLUS, MINUS, EXCLAMATION, TILDE, TYPEOF, VOID, AMPERSAND, CARET, PIPE, AMPERSAND_AMPERSAND, PIPE_PIPE;
%terminals STAR, FORWARD_SLASH, PERCENT, LESS_LESS, GREATER_GREATER, GREATER_GREATER_GREATER;
%terminals LESS, GREATER, LESS_EQUAL, GREATER_EQUAL, INSTANCEOF, IN, EQUAL_EQUAL, EXCLAMATION_EQUAL, EQUAL_EQUAL_EQUAL, EXCLAMATION_EQUAL_EQUAL;
%terminals EQUAL, STAR_EQUAL, FORWARD_SLASH_EQUAL, PERCENT_EQUAL, PLUS_EQUAL, MINUS_EQUAL, LESS_LESS_EQUAL, GREATER_GREATER_EQUAL, GREATER_GREATER_GREATER_EQUAL, AMPERSAND_EQUAL, CARET_EQUAL, PIPE_EQUAL;
%terminals CONST, DEBUGGER, CLASS, ENUM, EXPORT, EXTENDS, IMPORT, SUPER, IMPLEMENTS, INTERFACE, LET, PACKAGE, PRIVATE, PROTECTED, PUBLIC, STATIC, YIELD;
	
%typeof AssignmentExpression, AssignmentExpression_NoIn, LeftHandSideExpression, LeftHandSideExpression_NoLBF, UnaryExpression = "JSNode";
%typeof AdditiveExpression, AdditiveExpression_NoLBF, MultiplicativeExpression, MultiplicativeExpression_NoLBF, RelationalExpression, RelationalExpression_NoIn, RelationalExpression_NoLBF = "JSNode";
%typeof ShiftExpression, ShiftExpression_NoLBF, EqualityExpression, EqualityExpression_NoIn, EqualityExpression_NoLBF = "JSNode";
%typeof LogicalAndExpression, LogicalAndExpression_NoIn, LogicalAndExpression_NoLBF, LogicalOrExpression, LogicalOrExpression_NoIn, LogicalOrExpression_NoLBF = "JSNode";
%typeof BitwiseOrExpression, BitwiseOrExpression_NoIn, BitwiseOrExpression_NoLBF, BitwiseXorExpression, BitwiseXorExpression_NoIn, BitwiseXorExpression_NoLBF, BitwiseAndExpression, BitwiseAndExpression_NoIn, BitwiseAndExpression_NoLBF = "JSNode";
%typeof MemberExpression, MemberExpression_NoLBF, NewExpression, CallExpression, CallExpression_NoLBF, Expression, Expression_NoIn, Expression_NoLBF, Statement, Statement_NoIf, Arguments, Block, Catch, Finally = "JSNode";
%typeof VariableDeclaration, VariableDeclaration_NoIn, PropertyName, PropertyNameAndValue, Elision, ElementList, FormalParameterList, FunctionParameters, FunctionBody, SourceElement = "JSNode";
%typeof CaseClause, DefaultClause = "JSNode";

%goal Program;

Program
	=	SourceElements.p
		{:
			return new JSParseRootNode(p);
		:}
	|	{:
			return new JSParseRootNode();
		:}
	;

SourceElements
	=	SourceElements SourceElement
	|	SourceElement
	;

SourceElement
	=	Statement
	;

FunctionDeclaration
	=	FUNCTION Identifier.ident FunctionParameters.params FunctionBody.body
		{:
			return new JSFunctionNode(
				new JSIdentifierNode(ident),
				params,
				body
			);
		:}
	;

Identifier
	=	IDENTIFIER
	;

IdentifierName
	=	Identifier	
	|	BREAK
	|	CASE
	|	CATCH
	|	CONST
	|	CONTINUE
	|	DEBUGGER
	|	DEFAULT
	|	DELETE
	|	DO
	|	ELSE
	|	FALSE
	|	FINALLY
	|	FOR
	|	FUNCTION
	|	IF
	|	INSTANCEOF
	|	IN
	|	NEW
	|	NULL
	|	RETURN
	|	SWITCH
	|	THIS
	|	THROW
	|	TRUE
	|	TRY
	|	TYPEOF
	|	VAR
	|	VOID
	|	WHILE
	|	WITH
	|	CLASS
	|	ENUM
	|	EXPORT
	|	EXTENDS
	|	IMPORT
	|	SUPER
	|	IMPLEMENTS
	|	INTERFACE
	|	LET
	|	PACKAGE
	|	PRIVATE
	|	PROTECTED
	|	PUBLIC
	|	STATIC
	|	YIELD
	;

FunctionExpression
	=	FUNCTION.f FunctionParameters.params FunctionBody.body
		{:
			return new JSFunctionNode(
				new JSEmptyNode(f),
				params,
				body
			);
		:}
	|	FunctionDeclaration
	;

FunctionParameters
	=	LPAREN RPAREN
		{:
			return new JSParametersNode();
		:}
	|	LPAREN FormalParameterList.params RPAREN
		{:
			return params;
		:}
	;

FormalParameterList
	=	FormalParameterList.list COMMA Identifier.ident
		{:
			JSNode identifier = new JSIdentifierNode(ident);

			// add identifier to existing list
			list.addChild(identifier);

			return list;
		:}
	|	Identifier.ident
		{:
			JSNode identifier = new JSIdentifierNode(ident);

			return new JSParametersNode(identifier);
		:}
	;

FunctionBody
	=	LCURLY RCURLY
		{:
			return new JSStatementsNode();
		:}
	|	LCURLY SourceElements.s RCURLY
		{:
			return new JSStatementsNode(s);
		:}
	;

Statement
	=	Block
	|	FunctionDeclaration
	|	VAR.v VariableDeclarationList.l SEMICOLON.s
		{:
			JSNode node = new JSVarNode(v, l);
			node.setSemicolonIncluded(s.getEnd() >= s.getStart());
			return node;
		:}
	|	Expression_NoLBF.e SEMICOLON
		{:
			e.setSemicolonIncluded(true);
			return e;
		:}
	|	IfStatement
	|	IterationStatement
	|	ContinueStatement
	|	BreakStatement
	|	ReturnStatement
	|	WithStatement
	|	LabelledStatement
	|	SwitchStatement
	|	ThrowStatement
	|	TryStatement
	|	SEMICOLON.s
		{:
			JSNode node = new JSEmptyNode(s);
			node.setSemicolonIncluded(true);
			return node;
		:}
	|	error
		{:
			return new JSErrorNode();
		:}
	;

Statement_NoIf
	=	Block
	|	FunctionDeclaration
	|	VAR.v VariableDeclarationList.l SEMICOLON
		{:
			JSNode node = new JSVarNode(v, l);
			node.setSemicolonIncluded(true);
			return node;
		:}
	|	Expression_NoLBF.e SEMICOLON
		{:
			e.setSemicolonIncluded(true);
			return e;
		:}
	|	IfStatement_NoIf
	|	IterationStatement_NoIf
	|	ContinueStatement
	|	BreakStatement
	|	ReturnStatement
	|	WithStatement_NoIf
	|	LabelledStatement_NoIf
	|	SwitchStatement
	|	ThrowStatement
	|	TryStatement
	|	SEMICOLON.s
		{:
			return new JSEmptyNode(s);
		:}
	|	error
		{:
			return new JSErrorNode();
		:}
	;

Block
	=	LCURLY RCURLY
		{:
			return new JSStatementsNode();
		:}
	|	LCURLY StatementList.a RCURLY
		{:
			return new JSStatementsNode(a);
		:}
	;

StatementList
	=	StatementList Statement
	|	Statement
	;

VariableDeclarationList
	=	VariableDeclarationList COMMA VariableDeclaration
	|	VariableDeclaration
	;

VariableDeclarationList_NoIn
	=	VariableDeclarationList_NoIn COMMA VariableDeclaration_NoIn
	|	VariableDeclaration_NoIn
	;

VariableDeclaration
	=	Identifier.i
		{:
			return new JSDeclarationNode(new JSIdentifierNode(i), null, new JSEmptyNode(i));
		:}
	|	Identifier.i EQUAL.e AssignmentExpression.expression
		{:
			return new JSDeclarationNode(new JSIdentifierNode(i), e, expression);
		:}
	;

VariableDeclaration_NoIn
	=	Identifier.i
		{:
			return new JSDeclarationNode(new JSIdentifierNode(i), null, new JSEmptyNode(i));
		:}
	|	Identifier.i EQUAL.e AssignmentExpression_NoIn.expression
		{:
			return new JSDeclarationNode(new JSIdentifierNode(i), e, expression);
		:}
	;

IfStatement
	=	IF LPAREN.l Expression.e RPAREN.r Statement_NoIf.sn ELSE Statement.s
		{:
			return new JSIfNode(l, e, r, sn, s);
		:}
	|	IF LPAREN.l Expression.e RPAREN.r Statement.s
		{:
			return new JSIfNode(l, e, r, s, new JSEmptyNode(s));
		:}
	;

IfStatement_NoIf
	=	IF LPAREN.l Expression.e RPAREN.r Statement_NoIf.sn ELSE Statement_NoIf.s
		{:
			return new JSIfNode(l, e, r, sn, s);
		:}
	;

IterationStatement
	=	DO Statement.s WHILE LPAREN.l Expression.e RPAREN.r SEMICOLON
		{:
			JSNode node = new JSDoNode(s, l, e, r);
			node.setSemicolonIncluded(true);
			return node;
		:}
	|	WHILE LPAREN.l Expression.e RPAREN.r Statement.s
		{:
			return new JSWhileNode(l, e, r, s);
		:}
	|	FOR LPAREN.l SEMICOLON.s1 SEMICOLON.s2 RPAREN.r Statement.s
		{:
			return new JSForNode(l, new JSEmptyNode(l), s1, new JSEmptyNode(s1), s2, new JSEmptyNode(s2), r, s);
		:}
	|	FOR LPAREN.l SEMICOLON.s1 SEMICOLON.s2 Expression.a RPAREN.r Statement.s
		{:
			return new JSForNode(l, new JSEmptyNode(l), s1, new JSEmptyNode(s1), s2, a, r, s);
		:}
	|	FOR LPAREN.l SEMICOLON.s1 Expression.c SEMICOLON.s2 RPAREN.r Statement.s
		{:
			return new JSForNode(l, new JSEmptyNode(l), s1, c, s2, new JSEmptyNode(s2), r, s);
		:}
	|	FOR LPAREN.l SEMICOLON.s1 Expression.c SEMICOLON.s2 Expression.a RPAREN.r Statement.s
		{:
			return new JSForNode(l, new JSEmptyNode(l), s1, c, s2, a, r, s);
		:}
	|	FOR LPAREN.l Expression_NoIn.i SEMICOLON.s1 SEMICOLON.s2 RPAREN.r Statement.s
		{:
			return new JSForNode(l, i, s1, new JSEmptyNode(s1), s2, new JSEmptyNode(s2), r, s);
		:}
	|	FOR LPAREN.l Expression_NoIn.i SEMICOLON.s1 SEMICOLON.s2 Expression.a RPAREN.r Statement.s
		{:
			return new JSForNode(l, i, s1, new JSEmptyNode(s1), s2, a, r, s);
		:}
	|	FOR LPAREN.l Expression_NoIn.i SEMICOLON.s1 Expression.c SEMICOLON.s2 RPAREN.r Statement.s
		{:
			return new JSForNode(l, i, s1, c, s2, new JSEmptyNode(s2), r, s);
		:}
	|	FOR LPAREN.l Expression_NoIn.i SEMICOLON.s1 Expression.c SEMICOLON.s2 Expression.a RPAREN.r Statement.s
		{:
			return new JSForNode(l, i, s1, c, s2, a, r, s);
		:}
	|	FOR LPAREN.l VAR.v VariableDeclarationList_NoIn.i SEMICOLON.s1 SEMICOLON.s2 RPAREN.r Statement.s
		{:
			return new JSForNode(l, new JSVarNode(v, i), s1, new JSEmptyNode(s1), s2, new JSEmptyNode(s2), r, s);
		:}
	|	FOR LPAREN.l VAR.v VariableDeclarationList_NoIn.i SEMICOLON.s1 SEMICOLON.s2 Expression.a RPAREN.r Statement.s
		{:
			return new JSForNode(l, new JSVarNode(v, i), s1, new JSEmptyNode(s1), s2, a, r, s);
		:}
	|	FOR LPAREN.l VAR.v VariableDeclarationList_NoIn.i SEMICOLON.s1 Expression.c SEMICOLON.s2 RPAREN.r Statement.s
		{:
			return new JSForNode(l, new JSVarNode(v, i), s1, c, s2, new JSEmptyNode(s2), r, s);
		:}
	|	FOR LPAREN.l VAR.v VariableDeclarationList_NoIn.i SEMICOLON.s1 Expression.c SEMICOLON.s2 Expression.a RPAREN.r Statement.s
		{:
			return new JSForNode(l, new JSVarNode(v, i), s1, c, s2, a, r, s);
		:}
	|	FOR LPAREN.l LeftHandSideExpression.i IN.in Expression.o RPAREN.r Statement.s
		{:
			return new JSForInNode(l, i, in, o, r, s);
		:}
	|	FOR LPAREN.l VAR.v VariableDeclaration_NoIn.i IN.in Expression.o RPAREN.r Statement.s
		{:
			return new JSForInNode(l, new JSVarNode(v, i), in, o, r, s);
		:}
	;

IterationStatement_NoIf
	=	DO Statement.s WHILE LPAREN.l Expression.e RPAREN.r SEMICOLON
		{:
			JSNode node = new JSDoNode(s, l, e, r);
			node.setSemicolonIncluded(true);
			return node;
		:}
	|	WHILE LPAREN.l Expression.e RPAREN.r Statement_NoIf.s
		{:
			return new JSWhileNode(l, e, r, s);
		:}
	|	FOR LPAREN.l SEMICOLON.s1 SEMICOLON.s2 RPAREN.r Statement_NoIf.s
		{:
			return new JSForNode(l, new JSEmptyNode(l), s1, new JSEmptyNode(s1), s2, new JSEmptyNode(s2), r, s);
		:}
	|	FOR LPAREN.l SEMICOLON.s1 SEMICOLON.s2 Expression.a RPAREN.r Statement_NoIf.s
		{:
			return new JSForNode(l, new JSEmptyNode(l), s1, new JSEmptyNode(s1), s2, a, r, s);
		:}
	|	FOR LPAREN.l SEMICOLON.s1 Expression.c SEMICOLON.s2 RPAREN.r Statement_NoIf.s
		{:
			return new JSForNode(l, new JSEmptyNode(l), s1, c, s2, new JSEmptyNode(s2), r, s);
		:}
	|	FOR LPAREN.l SEMICOLON.s1 Expression.c SEMICOLON.s2 Expression.a RPAREN.r Statement_NoIf.s
		{:
			return new JSForNode(l, new JSEmptyNode(l), s1, c, s2, a, r, s);
		:}
	|	FOR LPAREN.l Expression_NoIn.i SEMICOLON.s1 SEMICOLON.s2 RPAREN.r Statement_NoIf.s
		{:
			return new JSForNode(l, i, s1, new JSEmptyNode(s1), s2, new JSEmptyNode(s2), r, s);
		:}
	|	FOR LPAREN.l Expression_NoIn.i SEMICOLON.s1 SEMICOLON.s2 Expression.a RPAREN.r Statement_NoIf.s
		{:
			return new JSForNode(l, i, s1, new JSEmptyNode(s1), s2, a, r, s);
		:}
	|	FOR LPAREN.l Expression_NoIn.i SEMICOLON.s1 Expression.c SEMICOLON.s2 RPAREN.r Statement_NoIf.s
		{:
			return new JSForNode(l, i, s1, c, s2, new JSEmptyNode(s2), r, s);
		:}
	|	FOR LPAREN.l Expression_NoIn.i SEMICOLON.s1 Expression.c SEMICOLON.s2 Expression.a RPAREN.r Statement_NoIf.s
		{:
			return new JSForNode(l, i, s1, c, s2, a, r, s);
		:}
	|	FOR LPAREN.l VAR.v VariableDeclarationList_NoIn.i SEMICOLON.s1 SEMICOLON.s2 RPAREN.r Statement_NoIf.s
		{:
			return new JSForNode(l, new JSVarNode(v, i), s1, new JSEmptyNode(s1), s2, new JSEmptyNode(s2), r, s);
		:}
	|	FOR LPAREN.l VAR.v VariableDeclarationList_NoIn.i SEMICOLON.s1 SEMICOLON.s2 Expression.a RPAREN.r Statement_NoIf.s
		{:
			return new JSForNode(l, new JSVarNode(v, i), s1, new JSEmptyNode(s1), s2, a, r, s);
		:}
	|	FOR LPAREN.l VAR.v VariableDeclarationList_NoIn.i SEMICOLON.s1 Expression.c SEMICOLON.s2 RPAREN.r Statement_NoIf.s
		{:
			return new JSForNode(l, new JSVarNode(v, i), s1, c, s2, new JSEmptyNode(s2), r, s);
		:}
	|	FOR LPAREN.l VAR.v VariableDeclarationList_NoIn.i SEMICOLON.s1 Expression.c SEMICOLON.s2 Expression.a RPAREN.r Statement_NoIf.s
		{:
			return new JSForNode(l, new JSVarNode(v, i), s1, c, s2, a, r, s);
		:}
	|	FOR LPAREN.l LeftHandSideExpression.i IN.in Expression.o RPAREN.r Statement_NoIf.s
		{:
			return new JSForInNode(l, i, in, o, r, s);
		:}
	|	FOR LPAREN.l VAR.v VariableDeclaration_NoIn.i IN.in Expression.o RPAREN.r Statement_NoIf.s
		{:
			return new JSForInNode(l, new JSVarNode(v, i), in, o, r, s);
		:}
	;

ContinueStatement
	=	CONTINUE SEMICOLON
		{:
			JSNode node = new JSContinueNode();
			node.setSemicolonIncluded(true);
			return node;
		:}
	|	CONTINUE Identifier.i SEMICOLON
		{:
			JSNode node = new JSContinueNode(i);
			node.setSemicolonIncluded(true);
			return node;
		:}
	;

BreakStatement
	=	BREAK SEMICOLON
		{:
			JSNode node = new JSBreakNode();
			node.setSemicolonIncluded(true);
			return node;
		:}
	|	BREAK Identifier.i SEMICOLON
		{:
			JSNode node = new JSBreakNode(i);
			node.setSemicolonIncluded(true);
			return node;
		:}
	;

ReturnStatement
	=	RETURN.r SEMICOLON
		{:
			JSNode node = new JSReturnNode(new JSEmptyNode(r));
			node.setSemicolonIncluded(true);
			return node;
		:}
	|	RETURN Expression.e SEMICOLON
		{:
			JSNode node = new JSReturnNode(e);
			node.setSemicolonIncluded(true);
			return node;
		:}
	;

WithStatement
	=	WITH LPAREN.l Expression.e RPAREN.r Statement.s
		{:
			return new JSWithNode(l, e, r, s);
		:}
	;

WithStatement_NoIf
	=	WITH LPAREN.l Expression.e RPAREN.r Statement_NoIf.s
		{:
			return new JSWithNode(l, e, r, s);
		:}
	;

SwitchStatement
	=	SWITCH LPAREN.lp Expression.e RPAREN.rp LCURLY.lc RCURLY.rc
		{:
			return new JSSwitchNode(lp, e, rp, lc, rc);
		:}
	|	SWITCH LPAREN.lp Expression.e RPAREN.rp LCURLY.lc CaseClauses.c RCURLY.rc
		{:
			List<JSNode> nodes = new ArrayList<JSNode>();

			for (JSNode statement : c)
			{
				nodes.add(statement);
			}

			JSNode[] children = nodes.toArray(new JSNode[nodes.size()]);

			return new JSSwitchNode(lp, e, rp, lc, rc, children);
		:}
	|	SWITCH LPAREN.lp Expression.e RPAREN.rp LCURLY.lc DefaultClause.d RCURLY.rc
		{:
			return new JSSwitchNode(lp, e, rp, lc, rc, d);
		:}
	|	SWITCH LPAREN.lp Expression.e RPAREN.rp LCURLY.lc DefaultClause.d CaseClauses.c RCURLY.rc
		{:
			List<JSNode> nodes = new ArrayList<JSNode>();

			nodes.add(d);

			for (JSNode statement : c)
			{
				nodes.add(statement);
			}

			JSNode[] children = nodes.toArray(new JSNode[nodes.size()]);

			return new JSSwitchNode(lp, e, rp, lc, rc, children);
		:}
	|	SWITCH LPAREN.lp Expression.e RPAREN.rp LCURLY.lc CaseClauses.c DefaultClause.d RCURLY.rc
		{:
			List<JSNode> nodes = new ArrayList<JSNode>();

			for (JSNode statement : c)
			{
				nodes.add(statement);
			}

			nodes.add(d);

			JSNode[] children = nodes.toArray(new JSNode[nodes.size()]);

			return new JSSwitchNode(lp, e, rp, lc, rc, children);
		:}
	|	SWITCH LPAREN.lp Expression.e RPAREN.rp LCURLY.lc CaseClauses.c1 DefaultClause.d CaseClauses.c2 RCURLY.rc
		{:
			List<JSNode> nodes = new ArrayList<JSNode>();

			for (JSNode statement : c1)
			{
				nodes.add(statement);
			}

			nodes.add(d);

			for (JSNode statement : c2)
			{
				nodes.add(statement);
			}

			JSNode[] children = nodes.toArray(new JSNode[nodes.size()]);

			return new JSSwitchNode(lp, e, rp, lc, rc, children);
		:}
	;

CaseClauses
	=	CaseClauses CaseClause
	|	CaseClause
	;

CaseClause
	=	CASE Expression.e COLON.c
		{:
			return new JSCaseNode(e, c);
		:}
	|	CASE Expression.e COLON.c StatementList.s
		{:
			return new JSCaseNode(e, c, s);
		:}
	;

DefaultClause
	=	DEFAULT COLON.c
		{:
			return new JSDefaultNode(c);
		:}
	|	DEFAULT COLON.c StatementList.s
		{:
			return new JSDefaultNode(c, s);
		:}
	;

LabelledStatement
	=	Identifier.i COLON.c Statement.s
		{:
			JSNode id = new JSIdentifierNode(i);
			id.setLocation(i.getStart(), i.getEnd());

			return new JSLabelledNode(id, c, s);
		:}
	;

LabelledStatement_NoIf
	=	Identifier.i COLON.c Statement_NoIf.s
		{:
			JSNode id = new JSIdentifierNode(i);
			id.setLocation(i.getStart(), i.getEnd());

			return new JSLabelledNode(id, c, s);
		:}
	;

ThrowStatement
	=	THROW Expression.e SEMICOLON
		{:
			JSNode node = new JSThrowNode(e);

			node.setSemicolonIncluded(true);

			return node;
		:}
	;

TryStatement
	=	TRY Block.b Catch.c
		{:
			return new JSTryNode(b, c, new JSEmptyNode(c));
		:}
	|	TRY Block.b Finally.f
		{:
			return new JSTryNode(b, new JSEmptyNode(b), f);
		:}
	|	TRY Block.b Catch.c Finally.f
		{:
			return new JSTryNode(b, c, f);
		:}
	;

Catch
	=	CATCH LPAREN Identifier.i RPAREN Block.b
		{:
			JSNode id = new JSIdentifierNode(i);

			return new JSCatchNode(id, b);
		:}
	;

Finally
	=	FINALLY Block.b
		{:
			return new JSFinallyNode(b);
		:}
	;

PrimaryExpression
	=	PrimaryExpression_NoLBF
	|	ObjectLiteral
	;

PrimaryExpression_NoLBF
	=	THIS.t
		{:
			return new JSThisNode(t);
		:}
	|	Identifier.i
		{:
			return new JSIdentifierNode(i);
		:}
	|	Literal
	|	ArrayLiteral
	|	LPAREN.l Expression.e RPAREN.r
		{:
			return new JSGroupNode(l, e, r);
		:}
	;

ArrayLiteral
	=	LBRACKET.l RBRACKET.r
		{:
			return new JSArrayNode(l, r);
		:}
	|	LBRACKET.l Elision.e RBRACKET.r
		{:
			e.addChild(new JSNullNode());
			return new JSArrayNode(l, r, e);
		:}
	|	LBRACKET.l ElementList.e RBRACKET.r
		{:
			return new JSArrayNode(l, r, e);
		:}
	|	LBRACKET.l ElementList.e COMMA RBRACKET.r
		{:
			return new JSArrayNode(l, r, e, new JSNullNode());
		:}
	|	LBRACKET.l ElementList.e COMMA Elision.n RBRACKET.r
		{:
			n.addChild(new JSNullNode());
			return new JSArrayNode(l, r, e, n);
		:}
	;

ElementList
	=	AssignmentExpression.e
		{:
			return new JSElementsNode(e);
		:}
	|	Elision.n AssignmentExpression.e
		{:
			return new JSElementsNode(n, e);
		:}
	|	ElementList.l COMMA AssignmentExpression.e
		{:
			l.addChild(e);

			return l;
		:}
	|	ElementList.l COMMA Elision.n AssignmentExpression.e
		{:
			l.addChild(n);
			l.addChild(e);

			return l;
		:}
	;

Elision
	=	Elision.e COMMA
		{:
			e.addChild(new JSNullNode());

			return e;
		:}
	|	COMMA
		{:
			return new JSElisionNode(new JSNullNode());
		:}
	;

ObjectLiteral
	=	LCURLY.l RCURLY.r
		{:
			return new JSObjectNode(l, r);
		:}
	|	LCURLY.l PropertyNameAndValueList.p RCURLY.r
		{:
			return new JSObjectNode(l, r, p);
		:}
	|	LCURLY.l PropertyNameAndValueList.p COMMA RCURLY.r
		{:
			return new JSObjectNode(l, r, p);
		:}
	;

PropertyNameAndValueList
	=	PropertyNameAndValue
	|	PropertyNameAndValueList COMMA PropertyNameAndValue
	;

PropertyNameAndValue
	=	PropertyName.n COLON.c AssignmentExpression.v
		{:
			return new JSNameValuePairNode(n, c, v);
		:}
	;

PropertyName
	=	IdentifierName.i
		{:
			return new JSIdentifierNode(i);
		:}
	|	STRING.s
		{:
			return new JSStringNode(s);
		:}
	|	NUMBER.n
		{:
			return new JSNumberNode(n);
		:}
	;

MemberExpression
	=	PrimaryExpression
	|	FunctionExpression
	|	MemberExpression.l LBRACKET.lb Expression.r RBRACKET.rb
		{:
			return new JSGetElementNode(l, lb, r, rb);
		:}
	|	MemberExpression.l DOT.o IdentifierName.r
		{:
			return new JSGetPropertyNode(l, o, new JSIdentifierNode(r));
		:}
	|	NEW MemberExpression.e Arguments.a
		{:
			return new JSConstructNode(e, a);
		:}
	;

MemberExpression_NoLBF
	=	PrimaryExpression_NoLBF
	|	MemberExpression_NoLBF.l LBRACKET.lb Expression.r RBRACKET.rb
		{:
			return new JSGetElementNode(l, lb, r, rb);
		:}
	|	MemberExpression_NoLBF.l DOT.o IdentifierName.r
		{:
			return new JSGetPropertyNode(l, o, new JSIdentifierNode(r));
		:}
	|	NEW MemberExpression.e Arguments.a
		{:
			return new JSConstructNode(e, a);
		:}
	;

NewExpression
	=	MemberExpression
	|	NEW NewExpression.e
		{:
			return new JSConstructNode(e, new JSEmptyNode(e));
		:}
	;

NewExpression_NoLBF
	=	MemberExpression_NoLBF
	|	NEW NewExpression.e
		{:
			return new JSConstructNode(e, new JSEmptyNode(e));
		:}
	;

CallExpression
	=	MemberExpression.l Arguments.r
		{:
			return new JSInvokeNode(l, r);
		:}
	|	CallExpression.l Arguments.r
		{:
			return new JSInvokeNode(l, r);
		:}
	|	CallExpression.l LBRACKET.lb Expression.r RBRACKET.rb
		{:
			return new JSGetElementNode(l, lb, r, rb);
		:}
	|	CallExpression.l DOT.o IdentifierName.r
		{:
			return new JSGetPropertyNode(l, o, new JSIdentifierNode(r));
		:}
	;

CallExpression_NoLBF
	=	MemberExpression_NoLBF.l Arguments.r
		{:
			return new JSInvokeNode(l, r);
		:}
	|	CallExpression_NoLBF.l Arguments.r
		{:
			return new JSInvokeNode(l, r);
		:}
	|	CallExpression_NoLBF.l LBRACKET.lb Expression.r RBRACKET.rb
		{:
			return new JSGetElementNode(l, lb, r, rb);
		:}
	|	CallExpression_NoLBF.l DOT.o IdentifierName.r
		{:
			return new JSGetPropertyNode(l, o, new JSIdentifierNode(r));
		:}
	;

Arguments
	=	LPAREN RPAREN
		{:
			return new JSArgumentsNode();
		:}
	|	LPAREN ArgumentList.a RPAREN
		{:
			return new JSArgumentsNode(a);
		:}
	;

ArgumentList
	=	ArgumentList COMMA AssignmentExpression
	|	AssignmentExpression
	;

LeftHandSideExpression
	=	NewExpression
	|	CallExpression
	;

LeftHandSideExpression_NoLBF
	=	NewExpression_NoLBF
	|	CallExpression_NoLBF
	;

PostfixExpression
	=	LeftHandSideExpression
	|	LeftHandSideExpression.e PostfixOperator.o
		{:
			return new JSPostUnaryOperatorNode(o, e);
		:}
	;

PostfixExpression_NoLBF
	=	LeftHandSideExpression_NoLBF
	|	LeftHandSideExpression_NoLBF.e PostfixOperator.o
		{:
			return new JSPostUnaryOperatorNode(o, e);
		:}
	;

PostfixOperator
	=	PLUS_PLUS
	|	MINUS_MINUS
	;

UnaryExpression
	=	PostfixExpression
	|	UnaryOperator.o UnaryExpression.e
		{:
			return new JSPreUnaryOperatorNode(o, e);
		:}
	;

UnaryExpression_NoLBF
	=	PostfixExpression_NoLBF
	|	UnaryOperator.o UnaryExpression.e
		{:
			return new JSPreUnaryOperatorNode(o, e);
		:}
	;

UnaryOperator
	=	DELETE
	|	EXCLAMATION
	|	MINUS
	|	MINUS_MINUS
	|	PLUS
	|	PLUS_PLUS
	|	TILDE
	|	TYPEOF
	|	VOID
	;

MultiplicativeExpression
	=	UnaryExpression
	|	MultiplicativeExpression.l MultiplicativeOperator.o UnaryExpression.r
		{:
			return new JSBinaryArithmeticOperatorNode(l, o, r);
		:}
	;

MultiplicativeExpression_NoLBF
	=	UnaryExpression_NoLBF
	|	MultiplicativeExpression_NoLBF.l MultiplicativeOperator.o UnaryExpression.r
		{:
			return new JSBinaryArithmeticOperatorNode(l, o, r);
		:}
	;

MultiplicativeOperator
	=	STAR
	|	FORWARD_SLASH
	|	PERCENT
	;

AdditiveExpression
	=	MultiplicativeExpression
	|	AdditiveExpression.l AdditiveOperator.o MultiplicativeExpression.r
		{:
			return new JSBinaryArithmeticOperatorNode(l, o, r);
		:}
	;

AdditiveExpression_NoLBF
	=	MultiplicativeExpression_NoLBF
	|	AdditiveExpression_NoLBF.l AdditiveOperator.o MultiplicativeExpression.r
		{:
			return new JSBinaryArithmeticOperatorNode(l, o, r);
		:}
	;

AdditiveOperator
	=	PLUS
	|	MINUS
	;

ShiftExpression
	=	AdditiveExpression
	|	ShiftExpression.l ShiftOperator.o AdditiveExpression.r
		{:
			return new JSBinaryArithmeticOperatorNode(l, o, r);
		:}
	;

ShiftExpression_NoLBF
	=	AdditiveExpression_NoLBF
	|	ShiftExpression_NoLBF.l ShiftOperator.o AdditiveExpression.r
		{:
			return new JSBinaryArithmeticOperatorNode(l, o, r);
		:}
	;

ShiftOperator
	=	LESS_LESS
	|	GREATER_GREATER
	|	GREATER_GREATER_GREATER
	;

RelationalExpression
	=	ShiftExpression
	|	RelationalExpression.l RelationalOperator.o ShiftExpression.r
		{:
			return new JSBinaryBooleanOperatorNode(l, o, r);
		:}
	;

RelationalExpression_NoLBF
	=	ShiftExpression_NoLBF
	|	RelationalExpression_NoLBF.l RelationalOperator.o ShiftExpression.r
		{:
			return new JSBinaryBooleanOperatorNode(l, o, r);
		:}
	;

RelationalExpression_NoIn
	=	ShiftExpression
	|	RelationalExpression_NoIn.l RelationalOperator_NoIn.o ShiftExpression.r
		{:
			return new JSBinaryBooleanOperatorNode(l, o, r);
		:}
	;

RelationalOperator_NoIn
	=	LESS
	|	GREATER
	|	LESS_EQUAL
	|	GREATER_EQUAL
	|	INSTANCEOF
	;

RelationalOperator
	=	RelationalOperator_NoIn
	|	IN
	;

EqualityExpression
	=	RelationalExpression
	|	EqualityExpression.l EqualityOperator.o RelationalExpression.r
		{:
			return new JSBinaryBooleanOperatorNode(l, o, r);
		:}
	;

EqualityExpression_NoLBF
	=	RelationalExpression_NoLBF
	|	EqualityExpression_NoLBF.l EqualityOperator.o RelationalExpression.r
		{:
			return new JSBinaryBooleanOperatorNode(l, o, r);
		:}
	;

EqualityExpression_NoIn
	=	RelationalExpression_NoIn
	|	EqualityExpression_NoIn.l EqualityOperator.o RelationalExpression_NoIn.r
		{:
			return new JSBinaryBooleanOperatorNode(l, o, r);
		:}
	;

EqualityOperator
	=	EQUAL_EQUAL
	|	EXCLAMATION_EQUAL
	|	EQUAL_EQUAL_EQUAL
	|	EXCLAMATION_EQUAL_EQUAL
	;

BitwiseAndExpression
	=	BitwiseAndExpression.l AMPERSAND.o EqualityExpression.r
		{:
			return new JSBinaryArithmeticOperatorNode(l, o, r);
		:}
	|	EqualityExpression
	;

BitwiseAndExpression_NoLBF
	=	BitwiseAndExpression_NoLBF.l AMPERSAND.o EqualityExpression.r
		{:
			return new JSBinaryArithmeticOperatorNode(l, o, r);
		:}
	|	EqualityExpression_NoLBF
	;

BitwiseAndExpression_NoIn
	=	BitwiseAndExpression_NoIn.l AMPERSAND.o EqualityExpression_NoIn.r
		{:
			return new JSBinaryArithmeticOperatorNode(l, o, r);
		:}
	|	EqualityExpression_NoIn
	;

BitwiseXorExpression
	=	BitwiseXorExpression.l CARET.o BitwiseAndExpression.r
		{:
			return new JSBinaryArithmeticOperatorNode(l, o, r);
		:}
	|	BitwiseAndExpression
	;

BitwiseXorExpression_NoLBF
	=	BitwiseXorExpression_NoLBF.l CARET.o BitwiseAndExpression.r
		{:
			return new JSBinaryArithmeticOperatorNode(l, o, r);
		:}
	|	BitwiseAndExpression_NoLBF
	;

BitwiseXorExpression_NoIn
	=	BitwiseXorExpression_NoIn.l CARET.o BitwiseAndExpression_NoIn.r
		{:
			return new JSBinaryArithmeticOperatorNode(l, o, r);
		:}
	|	BitwiseAndExpression_NoIn
	;

BitwiseOrExpression
	=	BitwiseOrExpression.l PIPE.o BitwiseXorExpression.r
		{:
			return new JSBinaryArithmeticOperatorNode(l, o, r);
		:}
	|	BitwiseXorExpression
	;

BitwiseOrExpression_NoLBF
	=	BitwiseOrExpression_NoLBF.l PIPE.o BitwiseXorExpression.r
		{:
			return new JSBinaryArithmeticOperatorNode(l, o, r);
		:}
	|	BitwiseXorExpression_NoLBF
	;

BitwiseOrExpression_NoIn
	=	BitwiseOrExpression_NoIn.l PIPE.o BitwiseXorExpression_NoIn.r
		{:
			return new JSBinaryArithmeticOperatorNode(l, o, r);
		:}
	|	BitwiseXorExpression_NoIn
	;

LogicalAndExpression
	=	LogicalAndExpression.l AMPERSAND_AMPERSAND.o BitwiseOrExpression.r
		{:
			return new JSBinaryBooleanOperatorNode(l, o, r);
		:}
	|	BitwiseOrExpression
	;

LogicalAndExpression_NoLBF
	=	LogicalAndExpression_NoLBF.l AMPERSAND_AMPERSAND.o BitwiseOrExpression.r
		{:
			return new JSBinaryBooleanOperatorNode(l, o, r);
		:}
	|	BitwiseOrExpression_NoLBF
	;

LogicalAndExpression_NoIn
	=	LogicalAndExpression_NoIn.l AMPERSAND_AMPERSAND.o BitwiseOrExpression_NoIn.r
		{:
			return new JSBinaryBooleanOperatorNode(l, o, r);
		:}
	|	BitwiseOrExpression_NoIn
	;

LogicalOrExpression
	=	LogicalOrExpression.l PIPE_PIPE.o LogicalAndExpression.r
		{:
			return new JSBinaryBooleanOperatorNode(l, o, r);
		:}
	|	LogicalAndExpression
	;

LogicalOrExpression_NoLBF
	=	LogicalOrExpression_NoLBF.l PIPE_PIPE.o LogicalAndExpression.r
		{:
			return new JSBinaryBooleanOperatorNode(l, o, r);
		:}
	|	LogicalAndExpression_NoLBF
	;

LogicalOrExpression_NoIn
	=	LogicalOrExpression_NoIn.l PIPE_PIPE.o LogicalAndExpression_NoIn.r
		{:
			return new JSBinaryBooleanOperatorNode(l, o, r);
		:}
	|	LogicalAndExpression_NoIn
	;

ConditionalExpression
	=	LogicalOrExpression
	|	LogicalOrExpression.l QUESTION.q AssignmentExpression.t COLON.c AssignmentExpression.f
		{:
			return new JSConditionalNode(l, q, t, c, f);
		:}
	;

ConditionalExpression_NoLBF
	=	LogicalOrExpression_NoLBF
	|	LogicalOrExpression_NoLBF.l QUESTION.q AssignmentExpression.t COLON.c AssignmentExpression.f
		{:
			return new JSConditionalNode(l, q, t, c, f);
		:}
	;

ConditionalExpression_NoIn
	=	LogicalOrExpression_NoIn
	|	LogicalOrExpression_NoIn.l QUESTION.q AssignmentExpression_NoIn.t COLON.c AssignmentExpression_NoIn.f
		{:
			return new JSConditionalNode(l, q, t, c, f);
		:}
	;

AssignmentExpression
	=	ConditionalExpression
	|	LeftHandSideExpression.l AssignmentOperator.o AssignmentExpression.r
		{:
			return new JSAssignmentNode(l, o, r);
		:}
	;

AssignmentExpression_NoLBF
	=	ConditionalExpression_NoLBF
	|	LeftHandSideExpression_NoLBF.l AssignmentOperator.o AssignmentExpression.r
		{:
			return new JSAssignmentNode(l, o, r);
		:}
	;

AssignmentExpression_NoIn
	=	ConditionalExpression_NoIn
	|	LeftHandSideExpression.l AssignmentOperator.o AssignmentExpression_NoIn.r
		{:
			return new JSAssignmentNode(l, o, r);
		:}
	;

AssignmentOperator
	=	EQUAL
	|	STAR_EQUAL
	|	FORWARD_SLASH_EQUAL
	|	PERCENT_EQUAL
	|	PLUS_EQUAL
	|	MINUS_EQUAL
	|	LESS_LESS_EQUAL
	|	GREATER_GREATER_EQUAL
	|	GREATER_GREATER_GREATER_EQUAL
	|	AMPERSAND_EQUAL
	|	CARET_EQUAL
	|	PIPE_EQUAL
	;

Expression
	=	Expression.l COMMA AssignmentExpression.r
		{:
			return new JSCommaNode(l, r);
		:}
	|	AssignmentExpression
	;

Expression_NoLBF
	=	Expression_NoLBF.l COMMA AssignmentExpression.r
		{:
			return new JSCommaNode(l, r);
		:}
	|	AssignmentExpression_NoLBF
	;

Expression_NoIn
	=	Expression_NoIn.l COMMA AssignmentExpression_NoIn.r
		{:
			return new JSCommaNode(l, r);
		:}
	|	AssignmentExpression_NoIn
	;

Literal
	=	NULL.n
		{:
			return new JSNullNode(n);
		:}
	|	TRUE.t
		{:
			return new JSTrueNode(t);
		:}
	|	FALSE.f
		{:
			return new JSFalseNode(f);
		:}
	|	NUMBER.n
		{:
			return new JSNumberNode(n);
		:}
	|	STRING.s
		{:
			return new JSStringNode(s);
		:}
	|	REGEX.r
		{:
			return new JSRegexNode(r);
		:}
	;
