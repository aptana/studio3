/* The following code was generated by JFlex 1.4.3 on 8/6/13 11:14 AM */

// $codepro.audit.disable
/**
 * Aptana Studio
 * Copyright (c) 2005-2012 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the GNU Public License (GPL) v3 (with exceptions).
 * Please see the license.html included with this distribution for details.
 * Any modifications to this file must keep this entire header intact.
 */
package com.aptana.js.core.parsing;

import java.io.Reader;
import java.io.StringReader;

import java.util.ArrayList;
import java.util.List;

import beaver.Symbol;
import beaver.Scanner;

import org.eclipse.core.internal.utils.StringPool;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 8/6/13 11:14 AM from the specification file
 * <tt>/Users/cwilliams/repos/studio3/plugins/com.aptana.js.core/parsing/JS.flex</tt>
 */
public class JSFlexScanner extends Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int REGEX = 4;
  public static final int DIVISION = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\12\1\10\1\1\1\0\1\10\1\1\16\12\4\0\1\10\1\63"+
    "\1\23\1\0\1\11\1\3\1\64\1\25\1\72\1\73\1\27\1\22"+
    "\1\74\1\66\1\20\1\26\1\14\11\17\1\75\1\71\1\2\1\62"+
    "\1\4\1\5\1\0\4\16\1\21\1\16\21\11\1\15\2\11\1\30"+
    "\1\24\1\31\1\67\1\11\1\0\1\40\1\36\1\42\1\52\1\35"+
    "\1\34\1\53\1\45\1\50\1\32\1\41\1\54\1\61\1\47\1\46"+
    "\1\57\1\32\1\37\1\43\1\44\1\51\1\60\1\56\1\33\1\55"+
    "\1\32\1\6\1\65\1\7\1\70\41\12\2\0\4\11\4\0\1\11"+
    "\2\0\1\12\7\0\1\11\4\0\1\11\5\0\27\11\1\0\37\11"+
    "\1\0\u013f\11\31\0\162\11\4\0\14\11\16\0\5\11\11\0\1\11"+
    "\21\0\130\12\5\0\23\12\12\0\1\11\13\0\1\11\1\0\3\11"+
    "\1\0\1\11\1\0\24\11\1\0\54\11\1\0\46\11\1\0\5\11"+
    "\4\0\202\11\1\0\4\12\3\0\105\11\1\0\46\11\2\0\2\11"+
    "\6\0\20\11\41\0\46\11\2\0\1\11\7\0\47\11\11\0\21\12"+
    "\1\0\27\12\1\0\3\12\1\0\1\12\1\0\2\12\1\0\1\12"+
    "\13\0\33\11\5\0\3\11\15\0\4\12\14\0\6\12\13\0\32\11"+
    "\5\0\13\11\16\12\7\0\12\13\4\0\2\11\1\12\143\11\1\0"+
    "\1\11\10\12\1\0\6\12\2\11\2\12\1\0\4\12\2\11\12\13"+
    "\3\11\2\0\1\11\17\0\1\12\1\11\1\12\36\11\33\12\2\0"+
    "\3\11\60\0\46\11\13\12\1\11\u014f\0\3\12\66\11\2\0\1\12"+
    "\1\11\20\12\2\0\1\11\4\12\3\0\12\11\2\12\2\0\12\13"+
    "\21\0\3\12\1\0\10\11\2\0\2\11\2\0\26\11\1\0\7\11"+
    "\1\0\1\11\3\0\4\11\2\0\1\12\1\11\7\12\2\0\2\12"+
    "\2\0\3\12\11\0\1\12\4\0\2\11\1\0\3\11\2\12\2\0"+
    "\12\13\4\11\15\0\3\12\1\0\6\11\4\0\2\11\2\0\26\11"+
    "\1\0\7\11\1\0\2\11\1\0\2\11\1\0\2\11\2\0\1\12"+
    "\1\0\5\12\4\0\2\12\2\0\3\12\13\0\4\11\1\0\1\11"+
    "\7\0\12\13\2\12\3\11\14\0\3\12\1\0\11\11\1\0\3\11"+
    "\1\0\26\11\1\0\7\11\1\0\2\11\1\0\5\11\2\0\1\12"+
    "\1\11\10\12\1\0\3\12\1\0\3\12\2\0\1\11\17\0\2\11"+
    "\2\12\2\0\12\13\1\0\1\11\17\0\3\12\1\0\10\11\2\0"+
    "\2\11\2\0\26\11\1\0\7\11\1\0\2\11\1\0\5\11\2\0"+
    "\1\12\1\11\6\12\3\0\2\12\2\0\3\12\10\0\2\12\4\0"+
    "\2\11\1\0\3\11\4\0\12\13\1\0\1\11\20\0\1\12\1\11"+
    "\1\0\6\11\3\0\3\11\1\0\4\11\3\0\2\11\1\0\1\11"+
    "\1\0\2\11\3\0\2\11\3\0\3\11\3\0\10\11\1\0\3\11"+
    "\4\0\5\12\3\0\3\12\1\0\4\12\11\0\1\12\17\0\11\13"+
    "\11\0\1\11\7\0\3\12\1\0\10\11\1\0\3\11\1\0\27\11"+
    "\1\0\12\11\1\0\5\11\4\0\7\12\1\0\3\12\1\0\4\12"+
    "\7\0\2\12\11\0\2\11\4\0\12\13\22\0\2\12\1\0\10\11"+
    "\1\0\3\11\1\0\27\11\1\0\12\11\1\0\5\11\2\0\1\12"+
    "\1\11\7\12\1\0\3\12\1\0\4\12\7\0\2\12\7\0\1\11"+
    "\1\0\2\11\4\0\12\13\22\0\2\12\1\0\10\11\1\0\3\11"+
    "\1\0\27\11\1\0\20\11\4\0\6\12\2\0\3\12\1\0\4\12"+
    "\11\0\1\12\10\0\2\11\4\0\12\13\22\0\2\12\1\0\22\11"+
    "\3\0\30\11\1\0\11\11\1\0\1\11\2\0\7\11\3\0\1\12"+
    "\4\0\6\12\1\0\1\12\1\0\10\12\22\0\2\12\15\0\60\11"+
    "\1\12\2\11\7\12\4\0\10\11\10\12\1\0\12\13\47\0\2\11"+
    "\1\0\1\11\2\0\2\11\1\0\1\11\2\0\1\11\6\0\4\11"+
    "\1\0\7\11\1\0\3\11\1\0\1\11\1\0\1\11\2\0\2\11"+
    "\1\0\4\11\1\12\2\11\6\12\1\0\2\12\1\11\2\0\5\11"+
    "\1\0\1\11\1\0\6\12\2\0\12\13\2\0\2\11\42\0\1\11"+
    "\27\0\2\12\6\0\12\13\13\0\1\12\1\0\1\12\1\0\1\12"+
    "\4\0\2\12\10\11\1\0\42\11\6\0\24\12\1\0\2\12\4\11"+
    "\4\0\10\12\1\0\44\12\11\0\1\12\71\0\42\11\1\0\5\11"+
    "\1\0\2\11\1\0\7\12\3\0\4\12\6\0\12\13\6\0\6\11"+
    "\4\12\106\0\46\11\12\0\51\11\7\0\132\11\5\0\104\11\5\0"+
    "\122\11\6\0\7\11\1\0\77\11\1\0\1\11\1\0\4\11\2\0"+
    "\7\11\1\0\1\11\1\0\4\11\2\0\47\11\1\0\1\11\1\0"+
    "\4\11\2\0\37\11\1\0\1\11\1\0\4\11\2\0\7\11\1\0"+
    "\1\11\1\0\4\11\2\0\7\11\1\0\7\11\1\0\27\11\1\0"+
    "\37\11\1\0\1\11\1\0\4\11\2\0\7\11\1\0\47\11\1\0"+
    "\23\11\16\0\11\13\56\0\125\11\14\0\u026c\11\2\0\10\11\12\0"+
    "\32\11\5\0\113\11\3\0\3\11\17\0\15\11\1\0\4\11\3\12"+
    "\13\0\22\11\3\12\13\0\22\11\2\12\14\0\15\11\1\0\3\11"+
    "\1\0\2\12\14\0\64\11\40\12\3\0\1\11\3\0\2\11\1\12"+
    "\2\0\12\13\41\0\3\12\2\0\12\13\6\0\130\11\10\0\51\11"+
    "\1\12\126\0\35\11\3\0\14\12\4\0\14\12\12\0\12\13\36\11"+
    "\2\0\5\11\u038b\0\154\11\224\0\234\11\4\0\132\11\6\0\26\11"+
    "\2\0\6\11\2\0\46\11\2\0\6\11\2\0\10\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\37\11\2\0\65\11\1\0\7\11"+
    "\1\0\1\11\3\0\3\11\1\0\7\11\3\0\4\11\2\0\6\11"+
    "\4\0\15\11\5\0\3\11\1\0\7\11\17\0\4\12\32\0\5\12"+
    "\20\0\2\11\23\0\1\11\13\0\4\12\6\0\6\12\1\0\1\11"+
    "\15\0\1\11\40\0\22\11\36\0\15\12\4\0\1\12\3\0\6\12"+
    "\27\0\1\11\4\0\1\11\2\0\12\11\1\0\1\11\3\0\5\11"+
    "\6\0\1\11\1\0\1\11\1\0\1\11\1\0\4\11\1\0\3\11"+
    "\1\0\7\11\3\0\3\11\5\0\5\11\26\0\44\11\u0e81\0\3\11"+
    "\31\0\11\11\6\12\1\0\5\11\2\0\5\11\4\0\126\11\2\0"+
    "\2\12\2\0\3\11\1\0\137\11\5\0\50\11\4\0\136\11\21\0"+
    "\30\11\70\0\20\11\u0200\0\u19b6\11\112\0\u51a6\11\132\0\u048d\11\u0773\0"+
    "\u2ba4\11\u215c\0\u012e\11\2\0\73\11\225\0\7\11\14\0\5\11\5\0"+
    "\1\11\1\12\12\11\1\0\15\11\1\0\5\11\1\0\1\11\1\0"+
    "\2\11\1\0\2\11\1\0\154\11\41\0\u016b\11\22\0\100\11\2\0"+
    "\66\11\50\0\15\11\3\0\20\12\20\0\4\12\17\0\2\11\30\0"+
    "\3\11\31\0\1\11\6\0\5\11\1\0\207\11\2\0\1\12\4\0"+
    "\1\11\13\0\12\13\7\0\32\11\4\0\1\11\1\0\32\11\12\0"+
    "\132\11\3\0\6\11\2\0\6\11\2\0\6\11\2\0\3\11\3\0"+
    "\2\11\3\0\2\11\22\0\3\12\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\2\12\1\13\1\14\2\1\1\15\1\16"+
    "\1\17\1\20\17\11\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\3\1"+
    "\2\35\2\0\1\36\2\0\1\37\1\40\1\41\1\42"+
    "\1\0\1\12\2\0\1\43\1\44\1\0\1\45\1\1"+
    "\1\0\1\1\1\46\1\0\1\47\24\11\1\50\1\51"+
    "\2\11\1\52\11\11\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\3\0\1\64\1\65"+
    "\2\0\1\66\1\67\1\0\1\12\1\0\1\12\2\0"+
    "\1\46\1\70\2\0\1\11\1\71\20\11\1\72\3\11"+
    "\1\73\7\11\1\74\7\11\1\75\1\11\1\76\1\77"+
    "\1\100\1\0\1\101\2\0\1\102\1\0\5\11\1\103"+
    "\1\104\2\11\1\105\7\11\1\106\1\11\1\107\1\11"+
    "\1\110\11\11\1\111\4\11\1\112\1\102\1\113\1\114"+
    "\4\11\1\115\1\11\1\116\1\117\1\11\1\120\1\11"+
    "\1\121\1\11\1\122\10\11\1\123\1\124\7\11\1\125"+
    "\1\126\1\11\1\127\1\130\1\131\2\11\1\132\3\11"+
    "\1\133\3\11\1\134\1\135\1\11\1\136\4\11\1\137"+
    "\2\11\1\140\1\141\1\142\1\143\3\11\1\144\2\11"+
    "\1\145\1\11\1\146\1\147\1\150";

  private static int [] zzUnpackAction() {
    int [] result = new int[302];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\370\0\u0136\0\u0174\0\u01b2"+
    "\0\272\0\u01f0\0\272\0\u022e\0\u026c\0\u02aa\0\u02e8\0\u0326"+
    "\0\u0364\0\u03a2\0\u03e0\0\u041e\0\272\0\272\0\u045c\0\u049a"+
    "\0\u04d8\0\u0516\0\u0554\0\u0592\0\u05d0\0\u060e\0\u064c\0\u068a"+
    "\0\u06c8\0\u0706\0\u0744\0\u0782\0\u07c0\0\u07fe\0\u083c\0\u087a"+
    "\0\u08b8\0\u08f6\0\u0934\0\272\0\272\0\272\0\272\0\272"+
    "\0\272\0\u0972\0\u01f0\0\u09b0\0\u09ee\0\u0a2c\0\u0972\0\u01f0"+
    "\0\u0a6a\0\u0aa8\0\u0ae6\0\272\0\272\0\u0b24\0\272\0\u0b62"+
    "\0\u0ba0\0\u0bde\0\u0c1c\0\272\0\272\0\u0c5a\0\272\0\u0c98"+
    "\0\u0cd6\0\u0d14\0\u0d52\0\u0d90\0\272\0\u0dce\0\u0e0c\0\u0e4a"+
    "\0\u0e88\0\u0ec6\0\u0f04\0\u0f42\0\u0f80\0\u0fbe\0\u0ffc\0\u103a"+
    "\0\u1078\0\u10b6\0\u10f4\0\u1132\0\u1170\0\u11ae\0\u11ec\0\u122a"+
    "\0\u1268\0\u022e\0\u12a6\0\u12e4\0\u1322\0\u022e\0\u1360\0\u139e"+
    "\0\u13dc\0\u141a\0\u1458\0\u1496\0\u14d4\0\u1512\0\u1550\0\u158e"+
    "\0\u15cc\0\272\0\272\0\272\0\272\0\272\0\272\0\272"+
    "\0\272\0\u160a\0\u1648\0\u1686\0\u160a\0\272\0\u16c4\0\u1702"+
    "\0\u1740\0\272\0\u177e\0\u17bc\0\u17bc\0\u0c1c\0\u0c98\0\u0d14"+
    "\0\u17fa\0\u1838\0\u1876\0\u18b4\0\u18f2\0\u022e\0\u1930\0\u196e"+
    "\0\u19ac\0\u19ea\0\u1a28\0\u1a66\0\u1aa4\0\u1ae2\0\u1b20\0\u1b5e"+
    "\0\u1b9c\0\u1bda\0\u1c18\0\u1c56\0\u1c94\0\u1cd2\0\u022e\0\u1d10"+
    "\0\u1d4e\0\u1d8c\0\u022e\0\u1dca\0\u1e08\0\u1e46\0\u1e84\0\u1ec2"+
    "\0\u1f00\0\u1f3e\0\u022e\0\u1f7c\0\u1fba\0\u1ff8\0\u2036\0\u2074"+
    "\0\u20b2\0\u20f0\0\u022e\0\u212e\0\272\0\272\0\u216c\0\u21aa"+
    "\0\272\0\u21e8\0\u2226\0\u2226\0\u2264\0\u22a2\0\u22e0\0\u231e"+
    "\0\u235c\0\u239a\0\u022e\0\u022e\0\u23d8\0\u2416\0\u022e\0\u2454"+
    "\0\u2492\0\u24d0\0\u250e\0\u254c\0\u258a\0\u25c8\0\u022e\0\u2606"+
    "\0\u022e\0\u2644\0\u022e\0\u2682\0\u26c0\0\u26fe\0\u273c\0\u277a"+
    "\0\u27b8\0\u27f6\0\u2834\0\u2872\0\u022e\0\u28b0\0\u28ee\0\u292c"+
    "\0\u296a\0\u022e\0\272\0\272\0\u022e\0\u29a8\0\u29e6\0\u2a24"+
    "\0\u2a62\0\u022e\0\u2aa0\0\u022e\0\u022e\0\u2ade\0\u022e\0\u2b1c"+
    "\0\u022e\0\u2b5a\0\u022e\0\u2b98\0\u2bd6\0\u2c14\0\u2c52\0\u2c90"+
    "\0\u2cce\0\u2d0c\0\u2d4a\0\u022e\0\u022e\0\u2d88\0\u2dc6\0\u2e04"+
    "\0\u2e42\0\u2e80\0\u2ebe\0\u2efc\0\u022e\0\u022e\0\u2f3a\0\u022e"+
    "\0\u022e\0\u022e\0\u2f78\0\u2fb6\0\u022e\0\u2ff4\0\u3032\0\u3070"+
    "\0\u022e\0\u30ae\0\u30ec\0\u312a\0\u022e\0\u022e\0\u3168\0\u022e"+
    "\0\u31a6\0\u31e4\0\u3222\0\u3260\0\u022e\0\u329e\0\u32dc\0\u022e"+
    "\0\u022e\0\u022e\0\u022e\0\u331a\0\u3358\0\u3396\0\u022e\0\u33d4"+
    "\0\u3412\0\u022e\0\u3450\0\u022e\0\u022e\0\u022e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[302];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\5\1\14\1\4\1\15\1\16\2\14\1\15\1\17"+
    "\1\14\1\20\1\21\1\4\1\22\1\23\1\24\1\25"+
    "\1\26\2\14\1\27\1\30\1\31\1\32\2\14\1\33"+
    "\1\34\1\35\2\14\1\36\1\37\1\14\1\40\1\14"+
    "\1\41\1\42\1\43\1\44\1\45\1\14\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\4\1\5\1\62\3\4\1\63\1\4"+
    "\1\5\12\4\1\64\1\4\1\64\1\65\50\4\1\5"+
    "\1\62\3\4\1\63\1\4\1\5\12\4\1\64\1\4"+
    "\1\64\1\66\47\4\77\0\1\5\1\67\3\0\1\70"+
    "\1\0\1\5\67\0\1\71\1\72\1\0\1\73\54\0"+
    "\1\74\75\0\1\75\17\0\1\76\55\0\1\77\16\0"+
    "\1\100\103\0\7\14\1\0\1\14\10\0\30\14\27\0"+
    "\2\15\2\0\1\15\1\101\1\102\13\0\1\102\53\0"+
    "\2\15\1\103\1\0\1\15\1\101\1\102\11\0\1\103"+
    "\1\0\1\102\53\0\2\101\2\0\1\101\100\0\1\104"+
    "\37\0\1\105\13\0\1\106\1\0\21\106\1\107\1\110"+
    "\51\106\1\111\1\0\22\111\1\112\1\107\50\111\26\0"+
    "\1\113\1\114\130\0\1\115\24\0\7\14\1\0\1\14"+
    "\10\0\6\14\1\116\5\14\1\117\1\14\1\120\1\121"+
    "\10\14\25\0\7\14\1\0\1\14\10\0\1\14\1\122"+
    "\13\14\1\123\4\14\1\124\5\14\25\0\7\14\1\0"+
    "\1\14\10\0\5\14\1\125\22\14\25\0\7\14\1\0"+
    "\1\14\10\0\3\14\1\126\24\14\25\0\7\14\1\0"+
    "\1\14\10\0\6\14\1\127\5\14\1\130\5\14\1\131"+
    "\5\14\25\0\7\14\1\0\1\14\10\0\12\14\1\132"+
    "\4\14\1\133\4\14\1\134\3\14\25\0\7\14\1\0"+
    "\1\14\10\0\5\14\1\135\5\14\1\136\7\14\1\137"+
    "\4\14\25\0\7\14\1\0\1\14\10\0\3\14\1\140"+
    "\13\14\1\141\10\14\25\0\7\14\1\0\1\14\10\0"+
    "\2\14\1\142\12\14\1\143\11\14\1\144\25\0\7\14"+
    "\1\0\1\14\10\0\3\14\1\145\10\14\1\146\13\14"+
    "\25\0\7\14\1\0\1\14\10\0\3\14\1\147\24\14"+
    "\25\0\7\14\1\0\1\14\10\0\16\14\1\150\11\14"+
    "\25\0\7\14\1\0\1\14\10\0\13\14\1\151\2\14"+
    "\1\152\11\14\25\0\7\14\1\0\1\14\10\0\5\14"+
    "\1\153\1\154\10\14\1\155\10\14\25\0\7\14\1\0"+
    "\1\14\10\0\6\14\1\156\5\14\1\157\13\14\76\0"+
    "\1\160\75\0\1\161\75\0\1\162\1\0\1\163\73\0"+
    "\1\164\2\0\1\165\72\0\1\166\3\0\1\167\71\0"+
    "\1\170\16\0\1\72\1\0\1\73\114\0\1\4\133\0"+
    "\1\171\13\0\1\172\1\0\22\172\1\173\1\172\1\0"+
    "\1\172\1\174\31\172\1\175\13\172\62\0\1\176\13\0"+
    "\3\72\1\177\72\72\5\73\1\200\70\73\4\0\1\201"+
    "\55\0\1\202\13\0\3\100\1\203\72\100\13\0\2\101"+
    "\2\0\1\101\1\0\1\102\13\0\1\102\53\0\2\204"+
    "\2\0\1\204\2\0\1\205\43\0\1\205\23\0\1\206"+
    "\1\0\2\206\1\0\1\206\12\0\3\206\1\0\1\206"+
    "\1\0\1\206\7\0\1\206\23\0\1\106\1\0\21\106"+
    "\1\107\1\207\147\106\1\111\1\0\22\111\1\210\1\107"+
    "\146\111\1\211\1\0\24\211\1\212\47\211\27\213\1\214"+
    "\46\213\11\0\7\14\1\0\1\14\10\0\22\14\1\215"+
    "\5\14\25\0\7\14\1\0\1\14\10\0\5\14\1\216"+
    "\22\14\25\0\7\14\1\0\1\14\10\0\15\14\1\217"+
    "\12\14\25\0\7\14\1\0\1\14\10\0\15\14\1\220"+
    "\12\14\25\0\7\14\1\0\1\14\10\0\12\14\1\221"+
    "\12\14\1\222\2\14\25\0\7\14\1\0\1\14\10\0"+
    "\17\14\1\223\10\14\25\0\7\14\1\0\1\14\10\0"+
    "\11\14\1\224\16\14\25\0\7\14\1\0\1\14\10\0"+
    "\3\14\1\225\24\14\25\0\7\14\1\0\1\14\10\0"+
    "\12\14\1\226\15\14\25\0\7\14\1\0\1\14\10\0"+
    "\11\14\1\227\1\230\15\14\25\0\7\14\1\0\1\14"+
    "\10\0\15\14\1\231\12\14\25\0\7\14\1\0\1\14"+
    "\10\0\6\14\1\232\21\14\25\0\7\14\1\0\1\14"+
    "\10\0\6\14\1\233\21\14\25\0\7\14\1\0\1\14"+
    "\10\0\25\14\1\234\2\14\25\0\7\14\1\0\1\14"+
    "\10\0\16\14\1\235\11\14\25\0\7\14\1\0\1\14"+
    "\10\0\17\14\1\236\3\14\1\237\4\14\25\0\7\14"+
    "\1\0\1\14\10\0\5\14\1\240\10\14\1\241\11\14"+
    "\25\0\7\14\1\0\1\14\10\0\25\14\1\242\2\14"+
    "\25\0\7\14\1\0\1\14\10\0\24\14\1\243\3\14"+
    "\25\0\7\14\1\0\1\14\10\0\22\14\1\244\5\14"+
    "\25\0\7\14\1\0\1\14\10\0\11\14\1\245\1\246"+
    "\15\14\25\0\7\14\1\0\1\14\10\0\25\14\1\247"+
    "\2\14\25\0\7\14\1\0\1\14\10\0\2\14\1\250"+
    "\1\14\1\251\15\14\1\252\5\14\25\0\7\14\1\0"+
    "\1\14\10\0\12\14\1\253\15\14\25\0\7\14\1\0"+
    "\1\14\10\0\3\14\1\254\24\14\25\0\7\14\1\0"+
    "\1\14\10\0\16\14\1\255\11\14\25\0\7\14\1\0"+
    "\1\14\10\0\12\14\1\256\15\14\25\0\7\14\1\0"+
    "\1\14\10\0\14\14\1\257\1\14\1\260\11\14\25\0"+
    "\7\14\1\0\1\14\10\0\10\14\1\261\17\14\25\0"+
    "\7\14\1\0\1\14\10\0\4\14\1\262\23\14\25\0"+
    "\7\14\1\0\1\14\10\0\5\14\1\263\22\14\25\0"+
    "\7\14\1\0\1\14\10\0\16\14\1\264\11\14\76\0"+
    "\1\265\75\0\1\266\13\0\1\172\1\0\22\172\1\173"+
    "\1\172\1\267\1\172\1\174\46\172\1\0\74\172\1\174"+
    "\1\0\22\174\1\270\4\174\1\172\44\174\3\72\1\177"+
    "\1\5\71\72\4\73\1\5\1\200\70\73\62\0\1\271"+
    "\13\0\3\100\1\203\3\100\1\5\66\100\13\0\2\204"+
    "\2\0\1\204\56\0\1\211\1\0\74\211\1\212\1\0"+
    "\74\212\27\213\1\272\46\213\26\273\1\274\1\275\46\273"+
    "\11\0\7\14\1\0\1\14\10\0\11\14\1\276\16\14"+
    "\25\0\7\14\1\0\1\14\10\0\6\14\1\277\21\14"+
    "\25\0\7\14\1\0\1\14\10\0\10\14\1\300\17\14"+
    "\25\0\7\14\1\0\1\14\10\0\3\14\1\301\24\14"+
    "\25\0\7\14\1\0\1\14\10\0\14\14\1\302\13\14"+
    "\25\0\7\14\1\0\1\14\10\0\27\14\1\303\25\0"+
    "\7\14\1\0\1\14\10\0\3\14\1\304\24\14\25\0"+
    "\7\14\1\0\1\14\10\0\6\14\1\305\21\14\25\0"+
    "\7\14\1\0\1\14\10\0\17\14\1\306\10\14\25\0"+
    "\7\14\1\0\1\14\10\0\3\14\1\307\24\14\25\0"+
    "\7\14\1\0\1\14\10\0\10\14\1\310\17\14\25\0"+
    "\7\14\1\0\1\14\10\0\11\14\1\311\1\312\15\14"+
    "\25\0\7\14\1\0\1\14\10\0\11\14\1\313\16\14"+
    "\25\0\7\14\1\0\1\14\10\0\12\14\1\314\15\14"+
    "\25\0\7\14\1\0\1\14\10\0\3\14\1\315\24\14"+
    "\25\0\7\14\1\0\1\14\10\0\12\14\1\316\15\14"+
    "\25\0\7\14\1\0\1\14\10\0\3\14\1\317\24\14"+
    "\25\0\7\14\1\0\1\14\10\0\14\14\1\320\13\14"+
    "\25\0\7\14\1\0\1\14\10\0\11\14\1\321\16\14"+
    "\25\0\7\14\1\0\1\14\10\0\3\14\1\322\24\14"+
    "\25\0\7\14\1\0\1\14\10\0\22\14\1\323\5\14"+
    "\25\0\7\14\1\0\1\14\10\0\12\14\1\324\15\14"+
    "\25\0\7\14\1\0\1\14\10\0\3\14\1\325\24\14"+
    "\25\0\7\14\1\0\1\14\10\0\14\14\1\326\5\14"+
    "\1\327\5\14\25\0\7\14\1\0\1\14\10\0\6\14"+
    "\1\330\21\14\25\0\7\14\1\0\1\14\10\0\17\14"+
    "\1\331\10\14\25\0\7\14\1\0\1\14\10\0\3\14"+
    "\1\332\24\14\25\0\7\14\1\0\1\14\10\0\22\14"+
    "\1\333\5\14\25\0\7\14\1\0\1\14\10\0\22\14"+
    "\1\334\5\14\25\0\7\14\1\0\1\14\10\0\13\14"+
    "\1\335\14\14\25\0\7\14\1\0\1\14\10\0\12\14"+
    "\1\336\15\14\25\0\7\14\1\0\1\14\10\0\26\14"+
    "\1\337\1\14\25\0\7\14\1\0\1\14\10\0\7\14"+
    "\1\340\20\14\25\0\7\14\1\0\1\14\10\0\22\14"+
    "\1\341\5\14\25\0\7\14\1\0\1\14\10\0\20\14"+
    "\1\342\7\14\46\0\30\267\14\0\1\174\1\0\74\174"+
    "\26\213\1\343\1\272\46\213\27\273\1\275\74\273\1\344"+
    "\1\275\46\273\11\0\7\14\1\0\1\14\10\0\3\14"+
    "\1\345\24\14\25\0\7\14\1\0\1\14\10\0\22\14"+
    "\1\346\5\14\25\0\7\14\1\0\1\14\10\0\12\14"+
    "\1\347\15\14\25\0\7\14\1\0\1\14\10\0\15\14"+
    "\1\350\12\14\25\0\7\14\1\0\1\14\10\0\5\14"+
    "\1\351\22\14\25\0\7\14\1\0\1\14\10\0\7\14"+
    "\1\352\20\14\25\0\7\14\1\0\1\14\10\0\5\14"+
    "\1\353\22\14\25\0\7\14\1\0\1\14\10\0\13\14"+
    "\1\354\14\14\25\0\7\14\1\0\1\14\10\0\12\14"+
    "\1\355\15\14\25\0\7\14\1\0\1\14\10\0\16\14"+
    "\1\356\11\14\25\0\7\14\1\0\1\14\10\0\11\14"+
    "\1\357\16\14\25\0\7\14\1\0\1\14\10\0\16\14"+
    "\1\360\11\14\25\0\7\14\1\0\1\14\10\0\5\14"+
    "\1\361\22\14\25\0\7\14\1\0\1\14\10\0\10\14"+
    "\1\362\17\14\25\0\7\14\1\0\1\14\10\0\24\14"+
    "\1\363\3\14\25\0\7\14\1\0\1\14\10\0\14\14"+
    "\1\364\13\14\25\0\7\14\1\0\1\14\10\0\6\14"+
    "\1\365\21\14\25\0\7\14\1\0\1\14\10\0\5\14"+
    "\1\366\22\14\25\0\7\14\1\0\1\14\10\0\5\14"+
    "\1\367\22\14\25\0\7\14\1\0\1\14\10\0\3\14"+
    "\1\370\24\14\25\0\7\14\1\0\1\14\10\0\17\14"+
    "\1\371\10\14\25\0\7\14\1\0\1\14\10\0\21\14"+
    "\1\372\6\14\25\0\7\14\1\0\1\14\10\0\12\14"+
    "\1\373\15\14\25\0\7\14\1\0\1\14\10\0\20\14"+
    "\1\374\7\14\25\0\7\14\1\0\1\14\10\0\3\14"+
    "\1\375\24\14\25\0\7\14\1\0\1\14\10\0\3\14"+
    "\1\376\24\14\25\0\7\14\1\0\1\14\10\0\6\14"+
    "\1\377\21\14\25\0\7\14\1\0\1\14\10\0\6\14"+
    "\1\u0100\21\14\25\0\7\14\1\0\1\14\10\0\16\14"+
    "\1\u0101\11\14\25\0\7\14\1\0\1\14\10\0\22\14"+
    "\1\u0102\5\14\25\0\7\14\1\0\1\14\10\0\16\14"+
    "\1\u0103\11\14\25\0\7\14\1\0\1\14\10\0\20\14"+
    "\1\u0104\7\14\25\0\7\14\1\0\1\14\10\0\12\14"+
    "\1\u0105\15\14\25\0\7\14\1\0\1\14\10\0\15\14"+
    "\1\u0106\12\14\25\0\7\14\1\0\1\14\10\0\15\14"+
    "\1\u0107\12\14\25\0\7\14\1\0\1\14\10\0\10\14"+
    "\1\u0108\17\14\25\0\7\14\1\0\1\14\10\0\13\14"+
    "\1\u0109\14\14\25\0\7\14\1\0\1\14\10\0\2\14"+
    "\1\u010a\25\14\25\0\7\14\1\0\1\14\10\0\15\14"+
    "\1\u010b\12\14\25\0\7\14\1\0\1\14\10\0\2\14"+
    "\1\u010c\25\14\25\0\7\14\1\0\1\14\10\0\12\14"+
    "\1\u010d\15\14\25\0\7\14\1\0\1\14\10\0\27\14"+
    "\1\u010e\25\0\7\14\1\0\1\14\10\0\22\14\1\u010f"+
    "\5\14\25\0\7\14\1\0\1\14\10\0\21\14\1\u0110"+
    "\6\14\25\0\7\14\1\0\1\14\10\0\3\14\1\u0111"+
    "\24\14\25\0\7\14\1\0\1\14\10\0\10\14\1\u0112"+
    "\17\14\25\0\7\14\1\0\1\14\10\0\12\14\1\u0113"+
    "\15\14\25\0\7\14\1\0\1\14\10\0\21\14\1\u0114"+
    "\6\14\25\0\7\14\1\0\1\14\10\0\10\14\1\u0115"+
    "\17\14\25\0\7\14\1\0\1\14\10\0\23\14\1\u0116"+
    "\4\14\25\0\7\14\1\0\1\14\10\0\14\14\1\u0117"+
    "\13\14\25\0\7\14\1\0\1\14\10\0\11\14\1\u0118"+
    "\16\14\25\0\7\14\1\0\1\14\10\0\17\14\1\u0119"+
    "\10\14\25\0\7\14\1\0\1\14\10\0\10\14\1\u011a"+
    "\17\14\25\0\7\14\1\0\1\14\10\0\6\14\1\u011b"+
    "\21\14\25\0\7\14\1\0\1\14\10\0\3\14\1\u011c"+
    "\24\14\25\0\7\14\1\0\1\14\10\0\12\14\1\u011d"+
    "\15\14\25\0\7\14\1\0\1\14\10\0\3\14\1\u011e"+
    "\24\14\25\0\7\14\1\0\1\14\10\0\12\14\1\u011f"+
    "\15\14\25\0\7\14\1\0\1\14\10\0\3\14\1\u0120"+
    "\24\14\25\0\7\14\1\0\1\14\10\0\3\14\1\u0121"+
    "\24\14\25\0\7\14\1\0\1\14\10\0\15\14\1\u0122"+
    "\12\14\25\0\7\14\1\0\1\14\10\0\3\14\1\u0123"+
    "\24\14\25\0\7\14\1\0\1\14\10\0\3\14\1\u0124"+
    "\24\14\25\0\7\14\1\0\1\14\10\0\10\14\1\u0125"+
    "\17\14\25\0\7\14\1\0\1\14\10\0\15\14\1\u0126"+
    "\12\14\25\0\7\14\1\0\1\14\10\0\5\14\1\u0127"+
    "\22\14\25\0\7\14\1\0\1\14\10\0\3\14\1\u0128"+
    "\24\14\25\0\7\14\1\0\1\14\10\0\14\14\1\u0129"+
    "\13\14\25\0\7\14\1\0\1\14\10\0\3\14\1\u012a"+
    "\24\14\25\0\7\14\1\0\1\14\10\0\12\14\1\u012b"+
    "\15\14\25\0\7\14\1\0\1\14\10\0\20\14\1\u012c"+
    "\7\14\25\0\7\14\1\0\1\14\10\0\2\14\1\u012d"+
    "\25\14\25\0\7\14\1\0\1\14\10\0\11\14\1\u012e"+
    "\16\14\14\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13454];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\4\1\1\11\1\1\1\11\11\1\2\11"+
    "\25\1\6\11\5\1\2\0\1\1\2\0\2\11\1\1"+
    "\1\11\1\0\1\1\2\0\2\11\1\0\1\11\1\1"+
    "\1\0\2\1\1\0\1\11\44\1\10\11\3\0\1\1"+
    "\1\11\2\0\1\1\1\11\1\0\1\1\1\0\1\1"+
    "\2\0\2\1\2\0\50\1\2\11\1\1\1\0\1\11"+
    "\2\0\1\1\1\0\45\1\2\11\112\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[302];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	// last token used for look behind. Also needed when implementing the ITokenScanner interface
	private Symbol _lastToken;
	
	private StringPool _stringPool;

	// flag indicating if we should collect comments or not
	private boolean _collectComments = true;

	// accumulator of consecutive vsdoc lines, later added to vsdocComments as a single entity
	private List<Symbol> _vsdocAccumulator = new ArrayList<Symbol>();

	// comment collections, by type
	private List<Symbol> _sdocComments = new ArrayList<Symbol>();
	private List<Symbol> _vsdocComments = new ArrayList<Symbol>();
	private List<Symbol> _singleLineComments = new ArrayList<Symbol>();
	private List<Symbol> _multiLineComments = new ArrayList<Symbol>();

	public JSFlexScanner()
	{
		this((Reader) null);
	}

	public Symbol getLastToken()
	{
		return _lastToken;
	}

	public List<Symbol> getSDocComments()
	{
		return _sdocComments;
	}

	public List<Symbol> getVSDocComments()
	{
		return _vsdocComments;
	}

	public List<Symbol> getSingleLineComments()
	{
		return _singleLineComments;
	}

	public List<Symbol> getMultiLineComments()
	{
		return _multiLineComments;
	}

	private Symbol newToken(JSTokenType type, Object value)
	{
		return newToken(type.getIndex(), value);
	}

	private Symbol newToken(JSTokenType type)
	{
		return newToken(type.getIndex(), type.getName());
	}
	
	private String pool(String value)
	{
		return _stringPool.add(value);
	}

	private Symbol newToken(short id, Object value)
	{
		return new Symbol(id, yychar, yychar + yylength() - 1, value);
	}

	public Symbol nextToken() throws java.io.IOException, Scanner.Exception
	{
		// clear accumulators
		_vsdocAccumulator.clear();

		try
		{
			// get next token
			_lastToken = yylex();
		} 
		catch (Scanner.Exception e)
		{
			// create default token type
			String text = yytext();
			int end = yychar + text.length() - 1;

			_lastToken = new Symbol(JSTokenType.EOF.getIndex(), yychar, end, text);
		}
		finally
		{
			// process any accumulated vsdoc lines
			if (!_vsdocAccumulator.isEmpty())
			{
				Symbol vsdoc = newToken(JSTokenType.VSDOC, new ArrayList<Symbol>(_vsdocAccumulator));

				_vsdocComments.add(vsdoc);
			}
		}

		return _lastToken;
	}

	private boolean isValidDivisionStart()
	{
		if (_lastToken != null)
		{
			switch (_lastToken.getId())
			{
				case Terminals.IDENTIFIER:
				case Terminals.NUMBER:
				case Terminals.REGEX:
				case Terminals.STRING:
				case Terminals.RPAREN:
				case Terminals.PLUS_PLUS:
				case Terminals.MINUS_MINUS:
				case Terminals.RBRACKET:
				case Terminals.RCURLY:
				case Terminals.FALSE:
				case Terminals.NULL:
				case Terminals.THIS:
				case Terminals.TRUE:
					return true;
			}
		}

		return false;
	}

	public void setCollectComments(boolean flag)
	{
		_collectComments = flag;
	}

	public void setSource(String source)
	{
		yyreset(new StringReader(source));

		_stringPool = new StringPool();

		// clear last token
		_lastToken = null;

		// reset comment collection lists
		_singleLineComments.clear();
		_multiLineComments.clear();
		_sdocComments.clear();
		_vsdocComments.clear();
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public JSFlexScanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public JSFlexScanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1772) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol yylex() throws java.io.IOException, Scanner.Exception {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 85: 
          { return newToken(JSTokenType.EXPORT);
          }
        case 105: break;
        case 67: 
          { return newToken(JSTokenType.ENUM);
          }
        case 106: break;
        case 13: 
          { yypushback(1);
						if (isValidDivisionStart())
						{
							yybegin(DIVISION);
						}
						else
						{
							yybegin(REGEX);
						}
          }
        case 107: break;
        case 38: 
          { if (_collectComments)
							{
								_singleLineComments.add(newToken(JSTokenType.SINGLELINE_COMMENT, yytext()));
							}
          }
        case 108: break;
        case 52: 
          { yybegin(YYINITIAL);
						return newToken(JSTokenType.FORWARD_SLASH_EQUAL);
          }
        case 109: break;
        case 47: 
          { return newToken(JSTokenType.PIPE_EQUAL);
          }
        case 110: break;
        case 57: 
          { return newToken(JSTokenType.FOR);
          }
        case 111: break;
        case 102: 
          { return newToken(JSTokenType.PROTECTED);
          }
        case 112: break;
        case 24: 
          { return newToken(JSTokenType.SEMICOLON);
          }
        case 113: break;
        case 59: 
          { return newToken(JSTokenType.NEW);
          }
        case 114: break;
        case 35: 
          { return newToken(JSTokenType.PLUS_PLUS);
          }
        case 115: break;
        case 54: 
          { return newToken(JSTokenType.GREATER_GREATER_GREATER);
          }
        case 116: break;
        case 86: 
          { return newToken(JSTokenType.RETURN);
          }
        case 117: break;
        case 76: 
          { return newToken(JSTokenType.FALSE);
          }
        case 118: break;
        case 15: 
          { return newToken(JSTokenType.LBRACKET);
          }
        case 119: break;
        case 89: 
          { return newToken(JSTokenType.TYPEOF);
          }
        case 120: break;
        case 83: 
          { return newToken(JSTokenType.YIELD);
          }
        case 121: break;
        case 98: 
          { return newToken(JSTokenType.FUNCTION);
          }
        case 122: break;
        case 41: 
          { return newToken(JSTokenType.IN);
          }
        case 123: break;
        case 101: 
          { return newToken(JSTokenType.INTERFACE);
          }
        case 124: break;
        case 39: 
          { return newToken(JSTokenType.STAR_EQUAL);
          }
        case 125: break;
        case 50: 
          { return newToken(JSTokenType.MINUS_MINUS);
          }
        case 126: break;
        case 10: 
          { return newToken(Terminals.NUMBER, pool(yytext()));
          }
        case 127: break;
        case 45: 
          { return newToken(JSTokenType.AMPERSAND_EQUAL);
          }
        case 128: break;
        case 77: 
          { return newToken(JSTokenType.BREAK);
          }
        case 129: break;
        case 58: 
          { return newToken(JSTokenType.TRY);
          }
        case 130: break;
        case 34: 
          { return newToken(JSTokenType.GREATER_EQUAL);
          }
        case 131: break;
        case 104: 
          { return newToken(JSTokenType.IMPLEMENTS);
          }
        case 132: break;
        case 65: 
          { return newToken(JSTokenType.GREATER_GREATER_GREATER_EQUAL);
          }
        case 133: break;
        case 49: 
          { return newToken(JSTokenType.MINUS_EQUAL);
          }
        case 134: break;
        case 36: 
          { return newToken(JSTokenType.PLUS_EQUAL);
          }
        case 135: break;
        case 56: 
          { if (_collectComments)
							{
								_vsdocAccumulator.add(newToken(JSTokenType.VSDOC, yytext()));
							}
          }
        case 136: break;
        case 63: 
          { return newToken(JSTokenType.EXCLAMATION_EQUAL_EQUAL);
          }
        case 137: break;
        case 87: 
          { return newToken(JSTokenType.STATIC);
          }
        case 138: break;
        case 11: 
          { return newToken(JSTokenType.DOT);
          }
        case 139: break;
        case 81: 
          { return newToken(JSTokenType.SUPER);
          }
        case 140: break;
        case 69: 
          { return newToken(JSTokenType.CASE);
          }
        case 141: break;
        case 21: 
          { return newToken(JSTokenType.MINUS);
          }
        case 142: break;
        case 16: 
          { return newToken(JSTokenType.RBRACKET);
          }
        case 143: break;
        case 37: 
          { return newToken(Terminals.STRING, pool(yytext()));
          }
        case 144: break;
        case 17: 
          { return newToken(JSTokenType.EQUAL);
          }
        case 145: break;
        case 18: 
          { return newToken(JSTokenType.EXCLAMATION);
          }
        case 146: break;
        case 14: 
          { return newToken(JSTokenType.STAR);
          }
        case 147: break;
        case 40: 
          { return newToken(JSTokenType.IF);
          }
        case 148: break;
        case 92: 
          { return newToken(JSTokenType.PUBLIC);
          }
        case 149: break;
        case 94: 
          { return newToken(JSTokenType.EXTENDS);
          }
        case 150: break;
        case 28: 
          { return newToken(JSTokenType.COLON);
          }
        case 151: break;
        case 26: 
          { return newToken(JSTokenType.RPAREN);
          }
        case 152: break;
        case 74: 
          { return newToken(JSTokenType.VOID);
          }
        case 153: break;
        case 23: 
          { return newToken(JSTokenType.TILDE);
          }
        case 154: break;
        case 30: 
          { return newToken(JSTokenType.LESS_LESS);
          }
        case 155: break;
        case 62: 
          { return newToken(JSTokenType.EQUAL_EQUAL_EQUAL);
          }
        case 156: break;
        case 99: 
          { return newToken(JSTokenType.CONTINUE);
          }
        case 157: break;
        case 48: 
          { return newToken(JSTokenType.PIPE_PIPE);
          }
        case 158: break;
        case 3: 
          { return newToken(JSTokenType.LESS);
          }
        case 159: break;
        case 60: 
          { return newToken(JSTokenType.LET);
          }
        case 160: break;
        case 5: 
          { return newToken(JSTokenType.GREATER);
          }
        case 161: break;
        case 84: 
          { return newToken(JSTokenType.WHILE);
          }
        case 162: break;
        case 68: 
          { return newToken(JSTokenType.ELSE);
          }
        case 163: break;
        case 78: 
          { return newToken(JSTokenType.CATCH);
          }
        case 164: break;
        case 75: 
          { if (_collectComments)
							{
								_sdocComments.add(newToken(JSTokenType.SDOC, yytext()));
							}
          }
        case 165: break;
        case 33: 
          { return newToken(JSTokenType.GREATER_GREATER);
          }
        case 166: break;
        case 27: 
          { return newToken(JSTokenType.COMMA);
          }
        case 167: break;
        case 61: 
          { return newToken(JSTokenType.VAR);
          }
        case 168: break;
        case 31: 
          { return newToken(JSTokenType.LESS_EQUAL);
          }
        case 169: break;
        case 29: 
          { yybegin(YYINITIAL);
						return newToken(JSTokenType.FORWARD_SLASH);
          }
        case 170: break;
        case 88: 
          { return newToken(JSTokenType.SWITCH);
          }
        case 171: break;
        case 22: 
          { return newToken(JSTokenType.CARET);
          }
        case 172: break;
        case 25: 
          { return newToken(JSTokenType.LPAREN);
          }
        case 173: break;
        case 103: 
          { return newToken(JSTokenType.INSTANCEOF);
          }
        case 174: break;
        case 55: 
          { return newToken(JSTokenType.GREATER_GREATER_EQUAL);
          }
        case 175: break;
        case 8: 
          { return newToken(JSTokenType.RCURLY);
          }
        case 176: break;
        case 4: 
          { return newToken(JSTokenType.PERCENT);
          }
        case 177: break;
        case 91: 
          { return newToken(JSTokenType.DELETE);
          }
        case 178: break;
        case 32: 
          { return newToken(JSTokenType.PERCENT_EQUAL);
          }
        case 179: break;
        case 51: 
          { return newToken(JSTokenType.CARET_EQUAL);
          }
        case 180: break;
        case 96: 
          { return newToken(JSTokenType.PRIVATE);
          }
        case 181: break;
        case 43: 
          { return newToken(JSTokenType.EQUAL_EQUAL);
          }
        case 182: break;
        case 100: 
          { return newToken(JSTokenType.DEBUGGER);
          }
        case 183: break;
        case 93: 
          { return newToken(JSTokenType.FINALLY);
          }
        case 184: break;
        case 97: 
          { return newToken(JSTokenType.PACKAGE);
          }
        case 185: break;
        case 90: 
          { return newToken(JSTokenType.IMPORT);
          }
        case 186: break;
        case 9: 
          { return newToken(Terminals.IDENTIFIER, pool(yytext()));
          }
        case 187: break;
        case 20: 
          { return newToken(JSTokenType.PIPE);
          }
        case 188: break;
        case 44: 
          { return newToken(JSTokenType.EXCLAMATION_EQUAL);
          }
        case 189: break;
        case 53: 
          { return newToken(JSTokenType.LESS_LESS_EQUAL);
          }
        case 190: break;
        case 66: 
          { if (_collectComments)
							{
								_multiLineComments.add(newToken(JSTokenType.MULTILINE_COMMENT, yytext()));
							}
          }
        case 191: break;
        case 2: 
          { /* ignore */
          }
        case 192: break;
        case 70: 
          { return newToken(JSTokenType.TRUE);
          }
        case 193: break;
        case 64: 
          { yybegin(YYINITIAL);
						return newToken(Terminals.REGEX, pool(yytext()));
          }
        case 194: break;
        case 46: 
          { return newToken(JSTokenType.AMPERSAND_AMPERSAND);
          }
        case 195: break;
        case 95: 
          { return newToken(JSTokenType.DEFAULT);
          }
        case 196: break;
        case 82: 
          { return newToken(JSTokenType.THROW);
          }
        case 197: break;
        case 72: 
          { return newToken(JSTokenType.NULL);
          }
        case 198: break;
        case 73: 
          { return newToken(JSTokenType.WITH);
          }
        case 199: break;
        case 7: 
          { return newToken(JSTokenType.LCURLY);
          }
        case 200: break;
        case 12: 
          { return newToken(JSTokenType.PLUS);
          }
        case 201: break;
        case 1: 
          { // make sure we reset the lexer state for next (potential) scan
				yybegin(YYINITIAL);
				throw new Scanner.Exception("Unexpected character '" + yytext() + "' around offset " + yychar);
          }
        case 202: break;
        case 6: 
          { return newToken(JSTokenType.QUESTION);
          }
        case 203: break;
        case 19: 
          { return newToken(JSTokenType.AMPERSAND);
          }
        case 204: break;
        case 79: 
          { return newToken(JSTokenType.CONST);
          }
        case 205: break;
        case 80: 
          { return newToken(JSTokenType.CLASS);
          }
        case 206: break;
        case 71: 
          { return newToken(JSTokenType.THIS);
          }
        case 207: break;
        case 42: 
          { return newToken(JSTokenType.DO);
          }
        case 208: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              { 	return newToken(Terminals.EOF, "end-of-file");
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
